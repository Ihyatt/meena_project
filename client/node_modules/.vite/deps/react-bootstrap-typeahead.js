import {
  _assertThisInitialized,
  _extends,
  _objectWithoutPropertiesLoose,
  _setPrototypeOf
} from "./chunk-T5KGTX4T.js";
import {
  require_classnames,
  require_warning
} from "./chunk-LWQY5TP4.js";
import {
  require_prop_types
} from "./chunk-GQK4SUQZ.js";
import {
  require_react_dom
} from "./chunk-3VFEIWTT.js";
import {
  require_react
} from "./chunk-ET2CLVD3.js";
import {
  __commonJS,
  __toESM
} from "./chunk-EQCVQC35.js";

// node_modules/lodash.debounce/index.js
var require_lodash = __commonJS({
  "node_modules/lodash.debounce/index.js"(exports, module) {
    var FUNC_ERROR_TEXT = "Expected a function";
    var NAN = 0 / 0;
    var symbolTag = "[object Symbol]";
    var reTrim = /^\s+|\s+$/g;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    var nativeMax = Math.max;
    var nativeMin = Math.min;
    var now = function() {
      return root.Date.now();
    };
    function debounce2(func, wait, options) {
      var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = "maxWait" in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      function invokeFunc(time) {
        var args = lastArgs, thisArg = lastThis;
        lastArgs = lastThis = void 0;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }
      function leadingEdge(time) {
        lastInvokeTime = time;
        timerId = setTimeout(timerExpired, wait);
        return leading ? invokeFunc(time) : result;
      }
      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, result2 = wait - timeSinceLastCall;
        return maxing ? nativeMin(result2, maxWait - timeSinceLastInvoke) : result2;
      }
      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
        return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
      }
      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        timerId = setTimeout(timerExpired, remainingWait(time));
      }
      function trailingEdge(time) {
        timerId = void 0;
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = void 0;
        return result;
      }
      function cancel() {
        if (timerId !== void 0) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = void 0;
      }
      function flush() {
        return timerId === void 0 ? result : trailingEdge(now());
      }
      function debounced() {
        var time = now(), isInvoking = shouldInvoke(time);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
          if (timerId === void 0) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === void 0) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, "");
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    module.exports = debounce2;
  }
});

// node_modules/invariant/browser.js
var require_browser = __commonJS({
  "node_modules/invariant/browser.js"(exports, module) {
    "use strict";
    var invariant3 = function(condition, format, a, b, c, d, e3, f) {
      if (true) {
        if (format === void 0) {
          throw new Error("invariant requires an error message argument");
        }
      }
      if (!condition) {
        var error;
        if (format === void 0) {
          error = new Error(
            "Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings."
          );
        } else {
          var args = [a, b, c, d, e3, f];
          var argIndex = 0;
          error = new Error(
            format.replace(/%s/g, function() {
              return args[argIndex++];
            })
          );
          error.name = "Invariant Violation";
        }
        error.framesToPop = 1;
        throw error;
      }
    };
    module.exports = invariant3;
  }
});

// node_modules/fast-deep-equal/index.js
var require_fast_deep_equal = __commonJS({
  "node_modules/fast-deep-equal/index.js"(exports, module) {
    "use strict";
    module.exports = function equal(a, b) {
      if (a === b) return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor) return false;
        var length, i, keys;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length) return false;
          for (i = length; i-- !== 0; )
            if (!equal(a[i], b[i])) return false;
          return true;
        }
        if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();
        keys = Object.keys(a);
        length = keys.length;
        if (length !== Object.keys(b).length) return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
        for (i = length; i-- !== 0; ) {
          var key = keys[i];
          if (!equal(a[key], b[key])) return false;
        }
        return true;
      }
      return a !== a && b !== b;
    };
  }
});

// node_modules/react-bootstrap-typeahead/es/components/AsyncTypeahead/AsyncTypeahead.js
var import_react28 = __toESM(require_react());

// node_modules/@babel/runtime/helpers/esm/typeof.js
function _typeof(o3) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o4) {
    return typeof o4;
  } : function(o4) {
    return o4 && "function" == typeof Symbol && o4.constructor === Symbol && o4 !== Symbol.prototype ? "symbol" : typeof o4;
  }, _typeof(o3);
}

// node_modules/@babel/runtime/helpers/esm/toPrimitive.js
function toPrimitive(t2, r2) {
  if ("object" != _typeof(t2) || !t2) return t2;
  var e3 = t2[Symbol.toPrimitive];
  if (void 0 !== e3) {
    var i = e3.call(t2, r2 || "default");
    if ("object" != _typeof(i)) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r2 ? String : Number)(t2);
}

// node_modules/@babel/runtime/helpers/esm/toPropertyKey.js
function toPropertyKey(t2) {
  var i = toPrimitive(t2, "string");
  return "symbol" == _typeof(i) ? i : i + "";
}

// node_modules/@babel/runtime/helpers/esm/defineProperty.js
function _defineProperty(e3, r2, t2) {
  return (r2 = toPropertyKey(r2)) in e3 ? Object.defineProperty(e3, r2, {
    value: t2,
    enumerable: true,
    configurable: true,
    writable: true
  }) : e3[r2] = t2, e3;
}

// node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js
function _objectWithoutProperties(e3, t2) {
  if (null == e3) return {};
  var o3, r2, i = _objectWithoutPropertiesLoose(e3, t2);
  if (Object.getOwnPropertySymbols) {
    var n2 = Object.getOwnPropertySymbols(e3);
    for (r2 = 0; r2 < n2.length; r2++) o3 = n2[r2], -1 === t2.indexOf(o3) && {}.propertyIsEnumerable.call(e3, o3) && (i[o3] = e3[o3]);
  }
  return i;
}

// node_modules/react-bootstrap-typeahead/es/behaviors/async.js
var import_lodash = __toESM(require_lodash());
var import_prop_types2 = __toESM(require_prop_types());
var import_react3 = __toESM(require_react());

// node_modules/@restart/hooks/esm/useForceUpdate.js
var import_react = __toESM(require_react());
function useForceUpdate() {
  const [, dispatch] = (0, import_react.useReducer)((state) => !state, false);
  return dispatch;
}

// node_modules/@restart/hooks/esm/usePrevious.js
var import_react2 = __toESM(require_react());
function usePrevious(value) {
  const ref = (0, import_react2.useRef)(null);
  (0, import_react2.useEffect)(() => {
    ref.current = value;
  });
  return ref.current;
}

// node_modules/react-bootstrap-typeahead/es/propTypes.js
var import_prop_types = __toESM(require_prop_types());

// node_modules/react-bootstrap-typeahead/es/constants.js
var ALIGN_VALUES = ["justify", "left", "right"];
var DEFAULT_LABELKEY = "label";
var SIZES = ["lg", "sm"];

// node_modules/react-bootstrap-typeahead/es/utils/getOptionLabel.js
var import_invariant = __toESM(require_browser());

// node_modules/react-bootstrap-typeahead/es/utils/getStringLabelKey.js
function getStringLabelKey(labelKey) {
  return typeof labelKey === "string" ? labelKey : DEFAULT_LABELKEY;
}

// node_modules/react-bootstrap-typeahead/es/utils/hasOwnProperty.js
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

// node_modules/react-bootstrap-typeahead/es/utils/nodash.js
var idCounter = 0;
function isFunction(value) {
  return typeof value === "function";
}
function isString(value) {
  return typeof value === "string";
}
function noop() {
}
function pick(obj, keys) {
  var result = {};
  keys.forEach(function(key) {
    result[key] = obj[key];
  });
  return result;
}
function uniqueId(prefix) {
  idCounter += 1;
  return (prefix == null ? "" : String(prefix)) + idCounter;
}

// node_modules/react-bootstrap-typeahead/es/utils/getOptionLabel.js
function getOptionLabel(option, labelKey) {
  if (!isString(option) && (hasOwnProperty(option, "paginationOption") || hasOwnProperty(option, "customOption"))) {
    return option[getStringLabelKey(labelKey)];
  }
  var optionLabel;
  if (isFunction(labelKey)) {
    optionLabel = labelKey(option);
  } else if (isString(option)) {
    optionLabel = option;
  } else {
    optionLabel = option[labelKey];
  }
  !isString(optionLabel) ? true ? (0, import_invariant.default)(false, "One or more options does not have a valid label string. Check the `labelKey` prop to ensure that it matches the correct option key and provides a string for filtering and display.") : (0, import_invariant.default)(false) : void 0;
  return optionLabel;
}
var getOptionLabel_default = getOptionLabel;

// node_modules/react-bootstrap-typeahead/es/utils/addCustomOption.js
function addCustomOption(results, props) {
  var allowNew = props.allowNew, labelKey = props.labelKey, text = props.text;
  if (!allowNew || !text.trim()) {
    return false;
  }
  if (isFunction(allowNew)) {
    return allowNew(results, props);
  }
  return !results.some(function(o3) {
    return getOptionLabel_default(o3, labelKey) === text;
  });
}
var addCustomOption_default = addCustomOption;

// node_modules/react-bootstrap-typeahead/es/utils/defaultFilterBy.js
var import_fast_deep_equal = __toESM(require_fast_deep_equal());

// node_modules/react-bootstrap-typeahead/es/utils/getOptionProperty.js
function getOptionProperty(option, key) {
  if (isString(option)) {
    return void 0;
  }
  return option[key];
}

// node_modules/react-bootstrap-typeahead/es/utils/stripDiacritics.js
var map = [{
  base: "A",
  letters: "AⒶＡÀÁÂẦẤẪẨÃĀĂẰẮẴẲȦǠÄǞẢÅǺǍȀȂẠẬẶḀĄȺⱯ"
}, {
  base: "AA",
  letters: "Ꜳ"
}, {
  base: "AE",
  letters: "ÆǼǢ"
}, {
  base: "AO",
  letters: "Ꜵ"
}, {
  base: "AU",
  letters: "Ꜷ"
}, {
  base: "AV",
  letters: "ꜸꜺ"
}, {
  base: "AY",
  letters: "Ꜽ"
}, {
  base: "B",
  letters: "BⒷＢḂḄḆɃƂƁ"
}, {
  base: "C",
  letters: "CⒸＣĆĈĊČÇḈƇȻꜾ"
}, {
  base: "D",
  letters: "DⒹＤḊĎḌḐḒḎĐƋƊƉꝹÐ"
}, {
  base: "DZ",
  letters: "ǱǄ"
}, {
  base: "Dz",
  letters: "ǲǅ"
}, {
  base: "E",
  letters: "EⒺＥÈÉÊỀẾỄỂẼĒḔḖĔĖËẺĚȄȆẸỆȨḜĘḘḚƐƎ"
}, {
  base: "F",
  letters: "FⒻＦḞƑꝻ"
}, {
  base: "G",
  letters: "GⒼＧǴĜḠĞĠǦĢǤƓꞠꝽꝾ"
}, {
  base: "H",
  letters: "HⒽＨĤḢḦȞḤḨḪĦⱧⱵꞍ"
}, {
  base: "I",
  letters: "IⒾＩÌÍÎĨĪĬİÏḮỈǏȈȊỊĮḬƗ"
}, {
  base: "J",
  letters: "JⒿＪĴɈ"
}, {
  base: "K",
  letters: "KⓀＫḰǨḲĶḴƘⱩꝀꝂꝄꞢ"
}, {
  base: "L",
  letters: "LⓁＬĿĹĽḶḸĻḼḺŁȽⱢⱠꝈꝆꞀ"
}, {
  base: "LJ",
  letters: "Ǉ"
}, {
  base: "Lj",
  letters: "ǈ"
}, {
  base: "M",
  letters: "MⓂＭḾṀṂⱮƜ"
}, {
  base: "N",
  letters: "NⓃＮǸŃÑṄŇṆŅṊṈȠƝꞐꞤ"
}, {
  base: "NJ",
  letters: "Ǌ"
}, {
  base: "Nj",
  letters: "ǋ"
}, {
  base: "O",
  letters: "OⓄＯÒÓÔỒỐỖỔÕṌȬṎŌṐṒŎȮȰÖȪỎŐǑȌȎƠỜỚỠỞỢỌỘǪǬØǾƆƟꝊꝌ"
}, {
  base: "OI",
  letters: "Ƣ"
}, {
  base: "OO",
  letters: "Ꝏ"
}, {
  base: "OU",
  letters: "Ȣ"
}, {
  base: "OE",
  letters: "Œ"
}, {
  base: "oe",
  letters: "œ"
}, {
  base: "P",
  letters: "PⓅＰṔṖƤⱣꝐꝒꝔ"
}, {
  base: "Q",
  letters: "QⓆＱꝖꝘɊ"
}, {
  base: "R",
  letters: "RⓇＲŔṘŘȐȒṚṜŖṞɌⱤꝚꞦꞂ"
}, {
  base: "S",
  letters: "SⓈＳẞŚṤŜṠŠṦṢṨȘŞⱾꞨꞄ"
}, {
  base: "T",
  letters: "TⓉＴṪŤṬȚŢṰṮŦƬƮȾꞆ"
}, {
  base: "TZ",
  letters: "Ꜩ"
}, {
  base: "U",
  letters: "UⓊＵÙÚÛŨṸŪṺŬÜǛǗǕǙỦŮŰǓȔȖƯỪỨỮỬỰỤṲŲṶṴɄ"
}, {
  base: "V",
  letters: "VⓋＶṼṾƲꝞɅ"
}, {
  base: "VY",
  letters: "Ꝡ"
}, {
  base: "W",
  letters: "WⓌＷẀẂŴẆẄẈⱲ"
}, {
  base: "X",
  letters: "XⓍＸẊẌ"
}, {
  base: "Y",
  letters: "YⓎＹỲÝŶỸȲẎŸỶỴƳɎỾ"
}, {
  base: "Z",
  letters: "ZⓏＺŹẐŻŽẒẔƵȤⱿⱫꝢ"
}, {
  base: "a",
  letters: "aⓐａẚàáâầấẫẩãāăằắẵẳȧǡäǟảåǻǎȁȃạậặḁąⱥɐ"
}, {
  base: "aa",
  letters: "ꜳ"
}, {
  base: "ae",
  letters: "æǽǣ"
}, {
  base: "ao",
  letters: "ꜵ"
}, {
  base: "au",
  letters: "ꜷ"
}, {
  base: "av",
  letters: "ꜹꜻ"
}, {
  base: "ay",
  letters: "ꜽ"
}, {
  base: "b",
  letters: "bⓑｂḃḅḇƀƃɓ"
}, {
  base: "c",
  letters: "cⓒｃćĉċčçḉƈȼꜿↄ"
}, {
  base: "d",
  letters: "dⓓｄḋďḍḑḓḏđƌɖɗꝺ"
}, {
  base: "dz",
  letters: "ǳǆ"
}, {
  base: "e",
  letters: "eⓔｅèéêềếễểẽēḕḗĕėëẻěȅȇẹệȩḝęḙḛɇɛǝ"
}, {
  base: "f",
  letters: "fⓕｆḟƒꝼ"
}, {
  base: "g",
  letters: "gⓖｇǵĝḡğġǧģǥɠꞡᵹꝿ"
}, {
  base: "h",
  letters: "hⓗｈĥḣḧȟḥḩḫẖħⱨⱶɥ"
}, {
  base: "hv",
  letters: "ƕ"
}, {
  base: "i",
  letters: "iⓘｉìíîĩīĭïḯỉǐȉȋịįḭɨı"
}, {
  base: "j",
  letters: "jⓙｊĵǰɉ"
}, {
  base: "k",
  letters: "kⓚｋḱǩḳķḵƙⱪꝁꝃꝅꞣ"
}, {
  base: "l",
  letters: "lⓛｌŀĺľḷḹļḽḻſłƚɫⱡꝉꞁꝇ"
}, {
  base: "lj",
  letters: "ǉ"
}, {
  base: "m",
  letters: "mⓜｍḿṁṃɱɯ"
}, {
  base: "n",
  letters: "nⓝｎǹńñṅňṇņṋṉƞɲŉꞑꞥ"
}, {
  base: "nj",
  letters: "ǌ"
}, {
  base: "o",
  letters: "oⓞｏòóôồốỗổõṍȭṏōṑṓŏȯȱöȫỏőǒȍȏơờớỡởợọộǫǭøǿɔꝋꝍɵ"
}, {
  base: "oi",
  letters: "ƣ"
}, {
  base: "ou",
  letters: "ȣ"
}, {
  base: "oo",
  letters: "ꝏ"
}, {
  base: "p",
  letters: "pⓟｐṕṗƥᵽꝑꝓꝕ"
}, {
  base: "q",
  letters: "qⓠｑɋꝗꝙ"
}, {
  base: "r",
  letters: "rⓡｒŕṙřȑȓṛṝŗṟɍɽꝛꞧꞃ"
}, {
  base: "s",
  letters: "sⓢｓßśṥŝṡšṧṣṩșşȿꞩꞅẛ"
}, {
  base: "t",
  letters: "tⓣｔṫẗťṭțţṱṯŧƭʈⱦꞇ"
}, {
  base: "tz",
  letters: "ꜩ"
}, {
  base: "u",
  letters: "uⓤｕùúûũṹūṻŭüǜǘǖǚủůűǔȕȗưừứữửựụṳųṷṵʉ"
}, {
  base: "v",
  letters: "vⓥｖṽṿʋꝟʌ"
}, {
  base: "vy",
  letters: "ꝡ"
}, {
  base: "w",
  letters: "wⓦｗẁẃŵẇẅẘẉⱳ"
}, {
  base: "x",
  letters: "xⓧｘẋẍ"
}, {
  base: "y",
  letters: "yⓨｙỳýŷỹȳẏÿỷẙỵƴɏỿ"
}, {
  base: "z",
  letters: "zⓩｚźẑżžẓẕƶȥɀⱬꝣ"
}].reduce(function(acc, _ref) {
  var base = _ref.base, letters = _ref.letters;
  letters.split("").forEach(function(letter) {
    acc[letter] = base;
  });
  return acc;
}, {});
var latin = "̀-ͯ";
var japanese = "゙゚";
function stripDiacritics(str) {
  return str.normalize("NFD").replace(new RegExp("[".concat(latin).concat(japanese, "]"), "g"), "").replace(/[^\u0000-\u007E]/g, function(a) {
    return map[a] || a;
  });
}

// node_modules/react-bootstrap-typeahead/es/utils/warn.js
var import_warning = __toESM(require_warning());
var warned = {};
function warn(falseToWarn, message) {
  if (!falseToWarn && message.indexOf("deprecated") !== -1) {
    if (warned[message]) {
      return;
    }
    warned[message] = true;
  }
  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }
  import_warning.default.apply(void 0, [falseToWarn, "[react-bootstrap-typeahead] ".concat(message)].concat(args));
}

// node_modules/react-bootstrap-typeahead/es/utils/defaultFilterBy.js
function isMatch(input, string, props) {
  var searchStr = input;
  var str = string;
  if (!props.caseSensitive) {
    searchStr = searchStr.toLowerCase();
    str = str.toLowerCase();
  }
  if (props.ignoreDiacritics) {
    searchStr = stripDiacritics(searchStr);
    str = stripDiacritics(str);
  }
  return str.indexOf(searchStr) !== -1;
}
function defaultFilterBy(option, props) {
  var filterBy = props.filterBy, labelKey = props.labelKey, multiple = props.multiple, selected = props.selected, text = props.text;
  if (multiple && selected.some(function(o3) {
    return (0, import_fast_deep_equal.default)(o3, option);
  })) {
    return false;
  }
  if (isFunction(labelKey)) {
    return isMatch(text, labelKey(option), props);
  }
  var fields = filterBy.slice();
  if (isString(labelKey)) {
    if (fields.indexOf(labelKey) === -1) {
      fields.unshift(labelKey);
    }
  }
  if (isString(option)) {
    warn(fields.length <= 1, "You cannot filter by properties when `option` is a string.");
    return isMatch(text, option, props);
  }
  return fields.some(function(field) {
    var value = getOptionProperty(option, field);
    if (!isString(value)) {
      warn(false, "Fields passed to `filterBy` should have string values. Value will be converted to a string; results may be unexpected.");
      value = String(value);
    }
    return isMatch(text, value, props);
  });
}

// node_modules/react-bootstrap-typeahead/es/utils/isSelectable.js
function isSelectable(inputNode) {
  return inputNode.selectionStart != null;
}

// node_modules/react-bootstrap-typeahead/es/utils/defaultSelectHint.js
function defaultSelectHint(e3, selectHint) {
  var shouldSelectHint = false;
  if (e3.key === "ArrowRight") {
    shouldSelectHint = isSelectable(e3.currentTarget) ? e3.currentTarget.selectionStart === e3.currentTarget.value.length : true;
  }
  if (e3.key === "Tab") {
    e3.preventDefault();
    shouldSelectHint = true;
  }
  return selectHint ? selectHint(shouldSelectHint, e3) : shouldSelectHint;
}

// node_modules/react-bootstrap-typeahead/es/utils/getDisplayName.js
function getDisplayName(Component) {
  return Component.displayName || Component.name || "Component";
}

// node_modules/react-bootstrap-typeahead/es/utils/getMatchBounds.js
var import_invariant2 = __toESM(require_browser());
var CASE_INSENSITIVE = "i";
var COMBINING_MARKS = /[\u0300-\u036F]/;
function escapeStringRegexp(str) {
  !(typeof str === "string") ? true ? (0, import_invariant2.default)(false, "`escapeStringRegexp` expected a string.") : (0, import_invariant2.default)(false) : void 0;
  return str.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
}
function getMatchBounds(subject, str) {
  var search = new RegExp(escapeStringRegexp(stripDiacritics(str)), CASE_INSENSITIVE);
  var matches = search.exec(stripDiacritics(subject));
  if (!matches) {
    return null;
  }
  var start = matches.index;
  var matchLength = matches[0].length;
  if (COMBINING_MARKS.test(subject)) {
    for (var ii = 0; ii <= start; ii++) {
      if (COMBINING_MARKS.test(subject[ii])) {
        start += 1;
      }
    }
    for (var _ii = start; _ii <= start + matchLength; _ii++) {
      if (COMBINING_MARKS.test(subject[_ii])) {
        matchLength += 1;
      }
    }
  }
  return {
    end: start + matchLength,
    start
  };
}

// node_modules/react-bootstrap-typeahead/es/utils/getHintText.js
function getHintText(_ref) {
  var activeIndex = _ref.activeIndex, initialItem = _ref.initialItem, isFocused = _ref.isFocused, isMenuShown = _ref.isMenuShown, labelKey = _ref.labelKey, multiple = _ref.multiple, selected = _ref.selected, text = _ref.text;
  if (
    // No text entered.
    !text || // The input is not focused.
    !isFocused || // The menu is hidden.
    !isMenuShown || // No item in the menu.
    !initialItem || // The initial item is a custom option.
    !isString(initialItem) && hasOwnProperty(initialItem, "customOption") || // The initial item is disabled
    !isString(initialItem) && initialItem.disabled || // One of the menu items is active.
    activeIndex > -1 || // There's already a selection in single-select mode.
    !!selected.length && !multiple
  ) {
    return "";
  }
  var initialItemStr = getOptionLabel_default(initialItem, labelKey);
  var bounds = getMatchBounds(initialItemStr.toLowerCase(), text.toLowerCase());
  if (!(bounds && bounds.start === 0)) {
    return "";
  }
  return text + initialItemStr.slice(bounds.end, initialItemStr.length);
}
var getHintText_default = getHintText;

// node_modules/react-bootstrap-typeahead/es/utils/getInputProps.js
var import_classnames = __toESM(require_classnames());

// node_modules/react-bootstrap-typeahead/es/utils/getMenuItemId.js
function getMenuItemId() {
  var id = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
  var position = arguments.length > 1 ? arguments[1] : void 0;
  return "".concat(id, "-item-").concat(position);
}

// node_modules/react-bootstrap-typeahead/es/utils/getInputProps.js
var _excluded = ["activeIndex", "id", "isFocused", "isMenuShown", "multiple", "onClick", "onFocus", "placeholder"];
function ownKeys(e3, r2) {
  var t2 = Object.keys(e3);
  if (Object.getOwnPropertySymbols) {
    var o3 = Object.getOwnPropertySymbols(e3);
    r2 && (o3 = o3.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
    })), t2.push.apply(t2, o3);
  }
  return t2;
}
function _objectSpread(e3) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys(Object(t2), true).forEach(function(r3) {
      _defineProperty(e3, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e3;
}
var getInputProps = function getInputProps2(_ref) {
  var activeIndex = _ref.activeIndex, id = _ref.id, isFocused = _ref.isFocused, isMenuShown = _ref.isMenuShown, multiple = _ref.multiple, onClick = _ref.onClick, onFocus = _ref.onFocus, placeholder = _ref.placeholder, props = _objectWithoutProperties(_ref, _excluded);
  return function() {
    var _cx;
    var inputProps = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var className = hasOwnProperty(inputProps, "className") ? String(inputProps.className) : void 0;
    return _objectSpread(_objectSpread(_objectSpread(_objectSpread({
      // These props can be overridden by values in `inputProps`.
      autoComplete: "off",
      placeholder,
      type: "text"
    }, inputProps), props), {}, {
      "aria-activedescendant": activeIndex >= 0 ? getMenuItemId(id, activeIndex) : void 0,
      "aria-autocomplete": "both",
      "aria-expanded": isMenuShown,
      "aria-haspopup": "listbox",
      "aria-multiselectable": multiple || void 0,
      "aria-owns": isMenuShown ? id : void 0,
      className: (0, import_classnames.default)((_cx = {}, _defineProperty(_cx, className || "", !multiple), _defineProperty(_cx, "focus", isFocused), _cx))
    }, multiple && {
      inputClassName: className
    }), {}, {
      onClick,
      onFocus,
      role: "combobox"
    });
  };
};
var getInputProps_default = getInputProps;

// node_modules/react-bootstrap-typeahead/es/utils/getInputText.js
function getInputText(props) {
  var activeItem = props.activeItem, labelKey = props.labelKey, multiple = props.multiple, selected = props.selected, text = props.text;
  if (activeItem) {
    return getOptionLabel_default(activeItem, labelKey);
  }
  if (!multiple && selected.length && selected[0]) {
    return getOptionLabel_default(selected[0], labelKey);
  }
  return text;
}
var getInputText_default = getInputText;

// node_modules/react-bootstrap-typeahead/es/utils/getIsOnlyResult.js
function getIsOnlyResult(props) {
  var allowNew = props.allowNew, highlightOnlyResult = props.highlightOnlyResult, results = props.results;
  if (!highlightOnlyResult || allowNew) {
    return false;
  }
  return results.length === 1 && !getOptionProperty(results[0], "disabled");
}
var getIsOnlyResult_default = getIsOnlyResult;

// node_modules/react-bootstrap-typeahead/es/utils/getTruncatedOptions.js
function getTruncatedOptions(options, maxResults) {
  if (!maxResults || maxResults >= options.length) {
    return options;
  }
  return options.slice(0, maxResults);
}
var getTruncatedOptions_default = getTruncatedOptions;

// node_modules/react-bootstrap-typeahead/es/utils/getUpdatedActiveIndex.js
function isDisabledOption(index2, items) {
  var option = items[index2];
  return !!option && !!getOptionProperty(option, "disabled");
}
function skipDisabledOptions(currentIndex, key, items) {
  var newIndex = currentIndex;
  while (isDisabledOption(newIndex, items)) {
    newIndex += key === "ArrowUp" ? -1 : 1;
  }
  return newIndex;
}
function getUpdatedActiveIndex(currentIndex, key, items) {
  var newIndex = currentIndex;
  newIndex += key === "ArrowUp" ? -1 : 1;
  newIndex = skipDisabledOptions(newIndex, key, items);
  if (newIndex === items.length) {
    newIndex = -1;
  } else if (newIndex === -2) {
    newIndex = items.length - 1;
    newIndex = skipDisabledOptions(newIndex, key, items);
  }
  return newIndex;
}

// node_modules/react-bootstrap-typeahead/es/utils/isShown.js
function isShown(_ref) {
  var open = _ref.open, minLength = _ref.minLength, showMenu = _ref.showMenu, text = _ref.text;
  if (open || open === false) {
    return open;
  }
  if (text.length < minLength) {
    return false;
  }
  return showMenu;
}

// node_modules/react-bootstrap-typeahead/es/utils/preventInputBlur.js
function preventInputBlur(e3) {
  e3.preventDefault();
}

// node_modules/react-bootstrap-typeahead/es/utils/propsWithBsClassName.js
var import_classnames2 = __toESM(require_classnames());

// node_modules/react-bootstrap-typeahead/es/utils/size.js
function isSizeLarge(size4) {
  return size4 === "lg";
}
function isSizeSmall(size4) {
  return size4 === "sm";
}

// node_modules/react-bootstrap-typeahead/es/utils/propsWithBsClassName.js
var _excluded2 = ["className", "isInvalid", "isValid", "size"];
function ownKeys2(e3, r2) {
  var t2 = Object.keys(e3);
  if (Object.getOwnPropertySymbols) {
    var o3 = Object.getOwnPropertySymbols(e3);
    r2 && (o3 = o3.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
    })), t2.push.apply(t2, o3);
  }
  return t2;
}
function _objectSpread2(e3) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys2(Object(t2), true).forEach(function(r3) {
      _defineProperty(e3, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys2(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e3;
}
function propsWithBsClassName(_ref) {
  var className = _ref.className, isInvalid = _ref.isInvalid, isValid = _ref.isValid, size4 = _ref.size, props = _objectWithoutProperties(_ref, _excluded2);
  return _objectSpread2(_objectSpread2({}, props), {}, {
    className: (0, import_classnames2.default)("form-control", "rbt-input", {
      "form-control-lg": isSizeLarge(size4),
      "form-control-sm": isSizeSmall(size4),
      "is-invalid": isInvalid,
      "is-valid": isValid
    }, className)
  });
}

// node_modules/react-bootstrap-typeahead/es/utils/validateSelectedPropChange.js
function validateSelectedPropChange(prevSelected, selected) {
  var uncontrolledToControlled = !prevSelected && selected;
  var controlledToUncontrolled = prevSelected && !selected;
  var from, to, precedent;
  if (uncontrolledToControlled) {
    from = "uncontrolled";
    to = "controlled";
    precedent = "an";
  } else {
    from = "controlled";
    to = "uncontrolled";
    precedent = "a";
  }
  var message = "You are changing ".concat(precedent, " ").concat(from, " typeahead to be ").concat(to, ". ") + "Input elements should not switch from ".concat(from, " to ").concat(to, " (or vice versa). ") + "Decide between using a controlled or uncontrolled element for the lifetime of the component.";
  warn(!(uncontrolledToControlled || controlledToUncontrolled), message);
}

// node_modules/react-bootstrap-typeahead/es/propTypes.js
var INPUT_PROPS_BLACKLIST = [{
  alt: "onBlur",
  prop: "onBlur"
}, {
  alt: "onInputChange",
  prop: "onChange"
}, {
  alt: "onFocus",
  prop: "onFocus"
}, {
  alt: "onKeyDown",
  prop: "onKeyDown"
}];
var sizeType = import_prop_types.default.oneOf(SIZES);
function checkPropType(validator, callback) {
  return function(props, propName, componentName) {
    import_prop_types.default.checkPropTypes(_defineProperty({}, propName, validator), props, "prop", componentName);
    isFunction(callback) && callback(props, propName, componentName);
  };
}
function caseSensitiveType(props) {
  var caseSensitive = props.caseSensitive, filterBy = props.filterBy;
  warn(!caseSensitive || typeof filterBy !== "function", "Your `filterBy` function will override the `caseSensitive` prop.");
}
function defaultInputValueType(props) {
  var defaultInputValue = props.defaultInputValue, defaultSelected = props.defaultSelected, multiple = props.multiple, selected = props.selected;
  var name = defaultSelected.length ? "defaultSelected" : "selected";
  warn(!(!multiple && defaultInputValue && (defaultSelected.length || selected && selected.length)), "`defaultInputValue` will be overridden by the value from `".concat(name, "`."));
}
function defaultSelectedType(props) {
  var defaultSelected = props.defaultSelected, multiple = props.multiple;
  warn(multiple || defaultSelected.length <= 1, "You are passing multiple options to the `defaultSelected` prop of a Typeahead in single-select mode. The selections will be truncated to a single selection.");
}
function highlightOnlyResultType(_ref) {
  var allowNew = _ref.allowNew, highlightOnlyResult = _ref.highlightOnlyResult;
  warn(!(highlightOnlyResult && allowNew), "`highlightOnlyResult` will not work with `allowNew`.");
}
function ignoreDiacriticsType(props) {
  var filterBy = props.filterBy, ignoreDiacritics = props.ignoreDiacritics;
  warn(ignoreDiacritics || typeof filterBy !== "function", "Your `filterBy` function will override the `ignoreDiacritics` prop.");
}
function inputPropsType(_ref2) {
  var inputProps = _ref2.inputProps;
  if (!(inputProps && Object.prototype.toString.call(inputProps) === "[object Object]")) {
    return;
  }
  INPUT_PROPS_BLACKLIST.forEach(function(_ref3) {
    var alt = _ref3.alt, prop = _ref3.prop;
    var msg = alt ? " Use the top-level `".concat(alt, "` prop instead.") : null;
    warn(!inputProps[prop], "The `".concat(prop, "` property of `inputProps` will be ignored.").concat(msg));
  });
}
function isRequiredForA11y(props, propName, componentName) {
  warn(props[propName] != null, "The prop `".concat(propName, "` is required to make `").concat(componentName, "` ") + "accessible for users of assistive technologies such as screen readers.");
}
function labelKeyType(_ref4) {
  var allowNew = _ref4.allowNew, labelKey = _ref4.labelKey;
  warn(!(isFunction(labelKey) && allowNew), "`labelKey` must be a string when `allowNew={true}`.");
}
var optionType = import_prop_types.default.oneOfType([import_prop_types.default.object, import_prop_types.default.string]);
function selectedType(_ref5) {
  var multiple = _ref5.multiple, onChange = _ref5.onChange, selected = _ref5.selected;
  warn(multiple || !selected || selected.length <= 1, "You are passing multiple options to the `selected` prop of a Typeahead in single-select mode. This may lead to unexpected behaviors or errors.");
  warn(!selected || selected && isFunction(onChange), "You provided a `selected` prop without an `onChange` handler. If you want the typeahead to be uncontrolled, use `defaultSelected`. Otherwise, set `onChange`.");
}

// node_modules/react-bootstrap-typeahead/es/behaviors/async.js
var _excluded3 = ["allowNew", "delay", "emptyLabel", "isLoading", "minLength", "onInputChange", "onSearch", "options", "promptText", "searchText", "useCache"];
function ownKeys3(e3, r2) {
  var t2 = Object.keys(e3);
  if (Object.getOwnPropertySymbols) {
    var o3 = Object.getOwnPropertySymbols(e3);
    r2 && (o3 = o3.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
    })), t2.push.apply(t2, o3);
  }
  return t2;
}
function _objectSpread3(e3) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys3(Object(t2), true).forEach(function(r3) {
      _defineProperty(e3, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys3(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e3;
}
var propTypes = {
  /**
   * Delay, in milliseconds, before performing search.
   */
  delay: import_prop_types2.default.number,
  /**
   * Whether or not a request is currently pending. Necessary for the
   * container to know when new results are available.
   */
  isLoading: import_prop_types2.default.bool.isRequired,
  /**
   * Number of input characters that must be entered before showing results.
   */
  minLength: import_prop_types2.default.number,
  /**
   * Callback to perform when the search is executed.
   */
  onSearch: import_prop_types2.default.func.isRequired,
  /**
   * Options to be passed to the typeahead. Will typically be the query
   * results, but can also be initial default options.
   */
  options: import_prop_types2.default.arrayOf(optionType),
  /**
   * Message displayed in the menu when there is no user input.
   */
  promptText: import_prop_types2.default.node,
  /**
   * Message displayed in the menu while the request is pending.
   */
  searchText: import_prop_types2.default.node,
  /**
   * Whether or not the component should cache query results.
   */
  useCache: import_prop_types2.default.bool
};
function useAsync(props) {
  var allowNew = props.allowNew, _props$delay = props.delay, delay = _props$delay === void 0 ? 200 : _props$delay, emptyLabel = props.emptyLabel, isLoading = props.isLoading, _props$minLength = props.minLength, minLength = _props$minLength === void 0 ? 2 : _props$minLength, onInputChange = props.onInputChange, onSearch = props.onSearch, _props$options = props.options, options = _props$options === void 0 ? [] : _props$options, _props$promptText = props.promptText, promptText = _props$promptText === void 0 ? "Type to search..." : _props$promptText, _props$searchText = props.searchText, searchText = _props$searchText === void 0 ? "Searching..." : _props$searchText, _props$useCache = props.useCache, useCache = _props$useCache === void 0 ? true : _props$useCache, otherProps = _objectWithoutProperties(props, _excluded3);
  var cacheRef = (0, import_react3.useRef)({});
  var handleSearchDebouncedRef = (0, import_react3.useRef)(null);
  var queryRef = (0, import_react3.useRef)(props.defaultInputValue || "");
  var forceUpdate = useForceUpdate();
  var prevProps = usePrevious(props);
  var handleSearch = (0, import_react3.useCallback)(function(query) {
    queryRef.current = query;
    if (!query || minLength && query.length < minLength) {
      return;
    }
    if (useCache && cacheRef.current[query]) {
      forceUpdate();
      return;
    }
    onSearch(query);
  }, [forceUpdate, minLength, onSearch, useCache]);
  (0, import_react3.useEffect)(function() {
    handleSearchDebouncedRef.current = (0, import_lodash.default)(handleSearch, delay);
    return function() {
      handleSearchDebouncedRef.current && handleSearchDebouncedRef.current.cancel();
    };
  }, [delay, handleSearch]);
  (0, import_react3.useEffect)(function() {
    if (!isLoading && prevProps && prevProps.isLoading && useCache) {
      cacheRef.current[queryRef.current] = options;
    }
  });
  var getEmptyLabel = function getEmptyLabel2() {
    if (!queryRef.current.length) {
      return promptText;
    }
    if (isLoading) {
      return searchText;
    }
    return emptyLabel;
  };
  var handleInputChange = (0, import_react3.useCallback)(function(query, e3) {
    onInputChange && onInputChange(query, e3);
    handleSearchDebouncedRef.current && handleSearchDebouncedRef.current(query);
  }, [onInputChange]);
  var cachedQuery = cacheRef.current[queryRef.current];
  return _objectSpread3(_objectSpread3({}, otherProps), {}, {
    // Disable custom selections during a search if `allowNew` isn't a function.
    allowNew: isFunction(allowNew) ? allowNew : allowNew && !isLoading,
    emptyLabel: getEmptyLabel(),
    isLoading,
    minLength,
    onInputChange: handleInputChange,
    options: useCache && cachedQuery ? cachedQuery : options
  });
}
function withAsync(Component) {
  warn(false, "Warning: `withAsync` is deprecated and will be removed in the next major version. Use `useAsync` instead.");
  var AsyncTypeahead2 = (0, import_react3.forwardRef)(function(props, ref) {
    return import_react3.default.createElement(Component, _extends({}, props, useAsync(props), {
      ref
    }));
  });
  AsyncTypeahead2.displayName = "withAsync(".concat(getDisplayName(Component), ")");
  AsyncTypeahead2.propTypes = propTypes;
  return AsyncTypeahead2;
}

// node_modules/@babel/runtime/helpers/esm/classCallCheck.js
function _classCallCheck(a, n2) {
  if (!(a instanceof n2)) throw new TypeError("Cannot call a class as a function");
}

// node_modules/@babel/runtime/helpers/esm/createClass.js
function _defineProperties(e3, r2) {
  for (var t2 = 0; t2 < r2.length; t2++) {
    var o3 = r2[t2];
    o3.enumerable = o3.enumerable || false, o3.configurable = true, "value" in o3 && (o3.writable = true), Object.defineProperty(e3, toPropertyKey(o3.key), o3);
  }
}
function _createClass(e3, r2, t2) {
  return r2 && _defineProperties(e3.prototype, r2), t2 && _defineProperties(e3, t2), Object.defineProperty(e3, "prototype", {
    writable: false
  }), e3;
}

// node_modules/@babel/runtime/helpers/esm/inherits.js
function _inherits(t2, e3) {
  if ("function" != typeof e3 && null !== e3) throw new TypeError("Super expression must either be null or a function");
  t2.prototype = Object.create(e3 && e3.prototype, {
    constructor: {
      value: t2,
      writable: true,
      configurable: true
    }
  }), Object.defineProperty(t2, "prototype", {
    writable: false
  }), e3 && _setPrototypeOf(t2, e3);
}

// node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js
function _possibleConstructorReturn(t2, e3) {
  if (e3 && ("object" == _typeof(e3) || "function" == typeof e3)) return e3;
  if (void 0 !== e3) throw new TypeError("Derived constructors may only return object or undefined");
  return _assertThisInitialized(t2);
}

// node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js
function _getPrototypeOf(t2) {
  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t3) {
    return t3.__proto__ || Object.getPrototypeOf(t3);
  }, _getPrototypeOf(t2);
}

// node_modules/react-bootstrap-typeahead/es/components/Typeahead/Typeahead.js
var import_classnames9 = __toESM(require_classnames());
var import_prop_types12 = __toESM(require_prop_types());
var import_react27 = __toESM(require_react());

// node_modules/react-bootstrap-typeahead/es/core/Typeahead.js
var import_fast_deep_equal2 = __toESM(require_fast_deep_equal());
var import_prop_types3 = __toESM(require_prop_types());
var import_react6 = __toESM(require_react());

// node_modules/react-bootstrap-typeahead/es/core/TypeaheadManager.js
var import_react5 = __toESM(require_react());

// node_modules/react-bootstrap-typeahead/es/core/Context.js
var import_react4 = __toESM(require_react());
var defaultContext = {
  activeIndex: -1,
  hintText: "",
  id: "",
  initialItem: null,
  inputNode: null,
  isOnlyResult: false,
  onActiveItemChange: noop,
  onAdd: noop,
  onInitialItemChange: noop,
  onMenuItemClick: noop,
  setItem: noop
};
var TypeaheadContext = (0, import_react4.createContext)(defaultContext);
var useTypeaheadContext = function useTypeaheadContext2() {
  return (0, import_react4.useContext)(TypeaheadContext);
};

// node_modules/react-bootstrap-typeahead/es/core/TypeaheadManager.js
function ownKeys4(e3, r2) {
  var t2 = Object.keys(e3);
  if (Object.getOwnPropertySymbols) {
    var o3 = Object.getOwnPropertySymbols(e3);
    r2 && (o3 = o3.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
    })), t2.push.apply(t2, o3);
  }
  return t2;
}
function _objectSpread4(e3) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys4(Object(t2), true).forEach(function(r3) {
      _defineProperty(e3, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys4(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e3;
}
var inputPropKeys = ["activeIndex", "disabled", "id", "inputRef", "isFocused", "isMenuShown", "multiple", "onBlur", "onChange", "onClick", "onFocus", "onKeyDown", "placeholder"];
var propKeys = ["activeIndex", "hideMenu", "isMenuShown", "labelKey", "onClear", "onHide", "onRemove", "results", "selected", "text", "toggleMenu"];
var contextKeys = ["activeIndex", "id", "initialItem", "inputNode", "onActiveItemChange", "onAdd", "onInitialItemChange", "onMenuItemClick", "setItem"];
var TypeaheadManager = function TypeaheadManager2(props) {
  var allowNew = props.allowNew, children = props.children, initialItem = props.initialItem, isMenuShown = props.isMenuShown, onAdd = props.onAdd, onInitialItemChange = props.onInitialItemChange, onKeyDown = props.onKeyDown, onMenuToggle = props.onMenuToggle, results = props.results, selectHint = props.selectHint;
  var hintText = getHintText_default(props);
  (0, import_react5.useEffect)(function() {
    if (!(allowNew || results.length)) {
      onInitialItemChange();
    }
  });
  var isInitialRender = (0, import_react5.useRef)(true);
  (0, import_react5.useEffect)(function() {
    if (isInitialRender.current) {
      isInitialRender.current = false;
      return;
    }
    onMenuToggle(isMenuShown);
  }, [isMenuShown, onMenuToggle]);
  var handleKeyDown = function handleKeyDown2(e3) {
    onKeyDown(e3);
    if (!initialItem) {
      return;
    }
    var addOnlyResult = e3.key === "Enter" && getIsOnlyResult_default(props);
    var shouldSelectHint = hintText && defaultSelectHint(e3, selectHint);
    if (addOnlyResult || shouldSelectHint) {
      onAdd(initialItem);
    }
  };
  var childProps = _objectSpread4(_objectSpread4({}, pick(props, propKeys)), {}, {
    getInputProps: getInputProps_default(_objectSpread4(_objectSpread4({}, pick(props, inputPropKeys)), {}, {
      onKeyDown: handleKeyDown,
      value: getInputText_default(props)
    }))
  });
  var contextValue = _objectSpread4(_objectSpread4({}, pick(props, contextKeys)), {}, {
    hintText,
    isOnlyResult: getIsOnlyResult_default(props)
  });
  return import_react5.default.createElement(TypeaheadContext.Provider, {
    value: contextValue
  }, isFunction(children) ? children(childProps) : children);
};
var TypeaheadManager_default = TypeaheadManager;

// node_modules/react-bootstrap-typeahead/es/core/TypeaheadState.js
function ownKeys5(e3, r2) {
  var t2 = Object.keys(e3);
  if (Object.getOwnPropertySymbols) {
    var o3 = Object.getOwnPropertySymbols(e3);
    r2 && (o3 = o3.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
    })), t2.push.apply(t2, o3);
  }
  return t2;
}
function _objectSpread5(e3) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys5(Object(t2), true).forEach(function(r3) {
      _defineProperty(e3, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys5(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e3;
}
function getInitialState(props) {
  var defaultInputValue = props.defaultInputValue, defaultOpen = props.defaultOpen, defaultSelected = props.defaultSelected, maxResults = props.maxResults, multiple = props.multiple;
  var selected = props.selected ? props.selected.slice() : defaultSelected.slice();
  var text = defaultInputValue;
  if (!multiple && selected.length) {
    text = getOptionLabel_default(selected[0], props.labelKey);
    if (selected.length > 1) {
      selected = selected.slice(0, 1);
    }
  }
  return {
    activeIndex: -1,
    activeItem: void 0,
    initialItem: void 0,
    isFocused: false,
    selected,
    showMenu: defaultOpen,
    shownResults: maxResults,
    text
  };
}
function clearTypeahead(state, props) {
  return _objectSpread5(_objectSpread5({}, getInitialState(props)), {}, {
    isFocused: state.isFocused,
    selected: [],
    text: ""
  });
}
function clickOrFocusInput(state) {
  return _objectSpread5(_objectSpread5({}, state), {}, {
    isFocused: true,
    showMenu: true
  });
}
function hideMenu(state, props) {
  var _getInitialState = getInitialState(props), activeIndex = _getInitialState.activeIndex, activeItem = _getInitialState.activeItem, initialItem = _getInitialState.initialItem, shownResults = _getInitialState.shownResults;
  return _objectSpread5(_objectSpread5({}, state), {}, {
    activeIndex,
    activeItem,
    initialItem,
    showMenu: false,
    shownResults
  });
}
function toggleMenu(state, props) {
  return state.showMenu ? hideMenu(state, props) : _objectSpread5(_objectSpread5({}, state), {}, {
    showMenu: true
  });
}

// node_modules/react-bootstrap-typeahead/es/core/Typeahead.js
var _excluded4 = ["onChange"];
function ownKeys6(e3, r2) {
  var t2 = Object.keys(e3);
  if (Object.getOwnPropertySymbols) {
    var o3 = Object.getOwnPropertySymbols(e3);
    r2 && (o3 = o3.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
    })), t2.push.apply(t2, o3);
  }
  return t2;
}
function _objectSpread6(e3) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys6(Object(t2), true).forEach(function(r3) {
      _defineProperty(e3, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys6(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e3;
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e3) {
    return false;
  }
}
var propTypes2 = {
  /**
   * Allows the creation of new selections on the fly. Note that any new items
   * will be added to the list of selections, but not the list of original
   * options unless handled as such by `Typeahead`'s parent.
   *
   * If a function is specified, it will be used to determine whether a custom
   * option should be included. The return value should be true or false.
   */
  allowNew: import_prop_types3.default.oneOfType([import_prop_types3.default.bool, import_prop_types3.default.func]),
  /**
   * Autofocus the input when the component initially mounts.
   */
  autoFocus: import_prop_types3.default.bool,
  /**
   * Whether or not filtering should be case-sensitive.
   */
  caseSensitive: checkPropType(import_prop_types3.default.bool, caseSensitiveType),
  /**
   * The initial value displayed in the text input.
   */
  defaultInputValue: checkPropType(import_prop_types3.default.string, defaultInputValueType),
  /**
   * Whether or not the menu is displayed upon initial render.
   */
  defaultOpen: import_prop_types3.default.bool,
  /**
   * Specify any pre-selected options. Use only if you want the component to
   * be uncontrolled.
   */
  defaultSelected: checkPropType(import_prop_types3.default.arrayOf(optionType), defaultSelectedType),
  /**
   * Either an array of fields in `option` to search, or a custom filtering
   * callback.
   */
  filterBy: import_prop_types3.default.oneOfType([import_prop_types3.default.arrayOf(import_prop_types3.default.string.isRequired), import_prop_types3.default.func]),
  /**
   * Highlights the menu item if there is only one result and allows selecting
   * that item by hitting enter. Does not work with `allowNew`.
   */
  highlightOnlyResult: checkPropType(import_prop_types3.default.bool, highlightOnlyResultType),
  /**
   * An html id attribute, required for assistive technologies such as screen
   * readers.
   */
  id: checkPropType(import_prop_types3.default.oneOfType([import_prop_types3.default.number, import_prop_types3.default.string]), isRequiredForA11y),
  /**
   * Whether the filter should ignore accents and other diacritical marks.
   */
  ignoreDiacritics: checkPropType(import_prop_types3.default.bool, ignoreDiacriticsType),
  /**
   * Specify the option key to use for display or a function returning the
   * display string. By default, the selector will use the `label` key.
   */
  labelKey: checkPropType(import_prop_types3.default.oneOfType([import_prop_types3.default.string, import_prop_types3.default.func]), labelKeyType),
  /**
   * Maximum number of results to display by default. Mostly done for
   * performance reasons so as not to render too many DOM nodes in the case of
   * large data sets.
   */
  maxResults: import_prop_types3.default.number,
  /**
   * Number of input characters that must be entered before showing results.
   */
  minLength: import_prop_types3.default.number,
  /**
   * Whether or not multiple selections are allowed.
   */
  multiple: import_prop_types3.default.bool,
  /**
   * Invoked when the input is blurred. Receives an event.
   */
  onBlur: import_prop_types3.default.func,
  /**
   * Invoked whenever items are added or removed. Receives an array of the
   * selected options.
   */
  onChange: import_prop_types3.default.func,
  /**
   * Invoked when the input is focused. Receives an event.
   */
  onFocus: import_prop_types3.default.func,
  /**
   * Invoked when the input value changes. Receives the string value of the
   * input.
   */
  onInputChange: import_prop_types3.default.func,
  /**
   * Invoked when a key is pressed. Receives an event.
   */
  onKeyDown: import_prop_types3.default.func,
  /**
   * Invoked when menu visibility changes.
   */
  onMenuToggle: import_prop_types3.default.func,
  /**
   * Invoked when the pagination menu item is clicked. Receives an event.
   */
  onPaginate: import_prop_types3.default.func,
  /**
   * Whether or not the menu should be displayed. `undefined` allows the
   * component to control visibility, while `true` and `false` show and hide
   * the menu, respectively.
   */
  open: import_prop_types3.default.bool,
  /**
   * Full set of options, including pre-selected options. Must either be an
   * array of objects (recommended) or strings.
   */
  options: import_prop_types3.default.arrayOf(optionType).isRequired,
  /**
   * Give user the ability to display additional results if the number of
   * results exceeds `maxResults`.
   */
  paginate: import_prop_types3.default.bool,
  /**
   * The selected option(s) displayed in the input. Use this prop if you want
   * to control the component via its parent.
   */
  selected: checkPropType(import_prop_types3.default.arrayOf(optionType), selectedType)
};
var defaultProps = {
  allowNew: false,
  autoFocus: false,
  caseSensitive: false,
  defaultInputValue: "",
  defaultOpen: false,
  defaultSelected: [],
  filterBy: [],
  highlightOnlyResult: false,
  ignoreDiacritics: true,
  labelKey: DEFAULT_LABELKEY,
  maxResults: 100,
  minLength: 0,
  multiple: false,
  onBlur: noop,
  onFocus: noop,
  onInputChange: noop,
  onKeyDown: noop,
  onMenuToggle: noop,
  onPaginate: noop,
  paginate: true
};
function triggerInputChange(input, value) {
  var inputValue = Object.getOwnPropertyDescriptor(window.HTMLInputElement.prototype, "value");
  inputValue && inputValue.set && inputValue.set.call(input, value);
  var e3 = new Event("input", {
    bubbles: true
  });
  input.dispatchEvent(e3);
}
var Typeahead = function(_React$Component) {
  _inherits(Typeahead2, _React$Component);
  var _super = _createSuper(Typeahead2);
  function Typeahead2() {
    var _this;
    _classCallCheck(this, Typeahead2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "state", getInitialState(_this.props));
    _defineProperty(_assertThisInitialized(_this), "inputNode", null);
    _defineProperty(_assertThisInitialized(_this), "isMenuShown", false);
    _defineProperty(_assertThisInitialized(_this), "items", []);
    _defineProperty(_assertThisInitialized(_this), "blur", function() {
      _this.inputNode && _this.inputNode.blur();
      _this.hideMenu();
    });
    _defineProperty(_assertThisInitialized(_this), "clear", function() {
      _this.setState(clearTypeahead);
    });
    _defineProperty(_assertThisInitialized(_this), "focus", function() {
      _this.inputNode && _this.inputNode.focus();
    });
    _defineProperty(_assertThisInitialized(_this), "getInput", function() {
      return _this.inputNode;
    });
    _defineProperty(_assertThisInitialized(_this), "inputRef", function(inputNode) {
      _this.inputNode = inputNode;
    });
    _defineProperty(_assertThisInitialized(_this), "setItem", function(item, position) {
      _this.items[position] = item;
    });
    _defineProperty(_assertThisInitialized(_this), "hideMenu", function() {
      _this.setState(hideMenu);
    });
    _defineProperty(_assertThisInitialized(_this), "toggleMenu", function() {
      _this.setState(toggleMenu);
    });
    _defineProperty(_assertThisInitialized(_this), "_handleActiveIndexChange", function(activeIndex) {
      _this.setState(function(state) {
        return {
          activeIndex,
          activeItem: activeIndex >= 0 ? state.activeItem : void 0
        };
      });
    });
    _defineProperty(_assertThisInitialized(_this), "_handleActiveItemChange", function(activeItem) {
      if (!(0, import_fast_deep_equal2.default)(activeItem, _this.state.activeItem)) {
        _this.setState({
          activeItem
        });
      }
    });
    _defineProperty(_assertThisInitialized(_this), "_handleBlur", function(e3) {
      e3.persist();
      _this.setState({
        isFocused: false
      }, function() {
        return _this.props.onBlur(e3);
      });
    });
    _defineProperty(_assertThisInitialized(_this), "_handleChange", function(selected) {
      _this.props.onChange && _this.props.onChange(selected);
    });
    _defineProperty(_assertThisInitialized(_this), "_handleClear", function() {
      _this.inputNode && triggerInputChange(_this.inputNode, "");
      _this.setState(clearTypeahead, function() {
        if (_this.props.multiple) {
          _this._handleChange([]);
        }
      });
    });
    _defineProperty(_assertThisInitialized(_this), "_handleClick", function(e3) {
      var _this$props$inputProp;
      e3.persist();
      var onClick = (_this$props$inputProp = _this.props.inputProps) === null || _this$props$inputProp === void 0 ? void 0 : _this$props$inputProp.onClick;
      _this.setState(clickOrFocusInput, function() {
        return isFunction(onClick) && onClick(e3);
      });
    });
    _defineProperty(_assertThisInitialized(_this), "_handleFocus", function(e3) {
      e3.persist();
      _this.setState(clickOrFocusInput, function() {
        return _this.props.onFocus(e3);
      });
    });
    _defineProperty(_assertThisInitialized(_this), "_handleInitialItemChange", function(initialItem) {
      if (!(0, import_fast_deep_equal2.default)(initialItem, _this.state.initialItem)) {
        _this.setState({
          initialItem
        });
      }
    });
    _defineProperty(_assertThisInitialized(_this), "_handleInputChange", function(e3) {
      e3.persist();
      var text = e3.currentTarget.value;
      var _this$props = _this.props, multiple = _this$props.multiple, onInputChange = _this$props.onInputChange;
      var shouldClearSelections = _this.state.selected.length && !multiple;
      _this.setState(function(state, props) {
        var _getInitialState = getInitialState(props), activeIndex = _getInitialState.activeIndex, activeItem = _getInitialState.activeItem, shownResults = _getInitialState.shownResults;
        return {
          activeIndex,
          activeItem,
          selected: shouldClearSelections ? [] : state.selected,
          showMenu: true,
          shownResults,
          text
        };
      }, function() {
        onInputChange(text, e3);
        shouldClearSelections && _this._handleChange([]);
      });
    });
    _defineProperty(_assertThisInitialized(_this), "_handleKeyDown", function(e3) {
      var activeItem = _this.state.activeItem;
      if (!_this.isMenuShown) {
        if (e3.key === "ArrowUp" || e3.key === "ArrowDown") {
          _this.setState({
            showMenu: true
          });
        }
        _this.props.onKeyDown(e3);
        return;
      }
      switch (e3.key) {
        case "ArrowUp":
        case "ArrowDown":
          e3.preventDefault();
          _this._handleActiveIndexChange(getUpdatedActiveIndex(_this.state.activeIndex, e3.key, _this.items));
          break;
        case "Enter":
          e3.preventDefault();
          activeItem && _this._handleMenuItemSelect(activeItem, e3);
          break;
        case "Escape":
        case "Tab":
          _this.hideMenu();
          break;
        default:
          break;
      }
      _this.props.onKeyDown(e3);
    });
    _defineProperty(_assertThisInitialized(_this), "_handleMenuItemSelect", function(option, e3) {
      if (getOptionProperty(option, "paginationOption")) {
        _this._handlePaginate(e3);
      } else {
        _this._handleSelectionAdd(option);
      }
    });
    _defineProperty(_assertThisInitialized(_this), "_handlePaginate", function(e3) {
      e3.persist();
      _this.setState(function(state, props) {
        return {
          shownResults: state.shownResults + props.maxResults
        };
      }, function() {
        return _this.props.onPaginate(e3, _this.state.shownResults);
      });
    });
    _defineProperty(_assertThisInitialized(_this), "_handleSelectionAdd", function(option) {
      var _this$props2 = _this.props, multiple = _this$props2.multiple, labelKey = _this$props2.labelKey;
      var selected;
      var selection = option;
      var text;
      if (!isString(selection) && selection.customOption) {
        selection = _objectSpread6(_objectSpread6({}, selection), {}, {
          id: uniqueId("new-id-")
        });
      }
      if (multiple) {
        selected = _this.state.selected.concat(selection);
        text = "";
      } else {
        selected = [selection];
        text = getOptionLabel_default(selection, labelKey);
      }
      _this.setState(function(state, props) {
        return _objectSpread6(_objectSpread6({}, hideMenu(state, props)), {}, {
          initialItem: selection,
          selected,
          text
        });
      }, function() {
        return _this._handleChange(selected);
      });
    });
    _defineProperty(_assertThisInitialized(_this), "_handleSelectionRemove", function(selection) {
      var selected = _this.state.selected.filter(function(option) {
        return !(0, import_fast_deep_equal2.default)(option, selection);
      });
      _this.focus();
      _this.setState(function(state, props) {
        return _objectSpread6(_objectSpread6({}, hideMenu(state, props)), {}, {
          selected
        });
      }, function() {
        return _this._handleChange(selected);
      });
    });
    return _this;
  }
  _createClass(Typeahead2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.props.autoFocus && this.focus();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      var _this$props3 = this.props, labelKey = _this$props3.labelKey, multiple = _this$props3.multiple, selected = _this$props3.selected;
      validateSelectedPropChange(selected, prevProps.selected);
      if (selected && !(0, import_fast_deep_equal2.default)(selected, prevState.selected)) {
        this.setState({
          selected
        });
        if (!multiple) {
          this.setState({
            text: selected.length ? getOptionLabel_default(selected[0], labelKey) : ""
          });
        }
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props4 = this.props, onChange = _this$props4.onChange, props = _objectWithoutProperties(_this$props4, _excluded4);
      var mergedPropsAndState = _objectSpread6(_objectSpread6({}, props), this.state);
      var filterBy = mergedPropsAndState.filterBy, labelKey = mergedPropsAndState.labelKey, options = mergedPropsAndState.options, paginate = mergedPropsAndState.paginate, shownResults = mergedPropsAndState.shownResults, text = mergedPropsAndState.text;
      this.isMenuShown = isShown(mergedPropsAndState);
      this.items = [];
      var results = [];
      if (this.isMenuShown) {
        var cb = isFunction(filterBy) ? filterBy : defaultFilterBy;
        results = options.filter(function(option) {
          return cb(option, mergedPropsAndState);
        });
        var shouldPaginate = paginate && results.length > shownResults;
        results = getTruncatedOptions_default(results, shownResults);
        if (addCustomOption_default(results, mergedPropsAndState)) {
          results.push(_defineProperty({
            customOption: true
          }, getStringLabelKey(labelKey), text));
        }
        if (shouldPaginate) {
          var _results$push2;
          results.push((_results$push2 = {}, _defineProperty(_results$push2, getStringLabelKey(labelKey), ""), _defineProperty(_results$push2, "paginationOption", true), _results$push2));
        }
      }
      return import_react6.default.createElement(TypeaheadManager_default, _extends({}, mergedPropsAndState, {
        hideMenu: this.hideMenu,
        inputNode: this.inputNode,
        inputRef: this.inputRef,
        isMenuShown: this.isMenuShown,
        onActiveItemChange: this._handleActiveItemChange,
        onAdd: this._handleSelectionAdd,
        onBlur: this._handleBlur,
        onChange: this._handleInputChange,
        onClear: this._handleClear,
        onClick: this._handleClick,
        onFocus: this._handleFocus,
        onHide: this.hideMenu,
        onInitialItemChange: this._handleInitialItemChange,
        onKeyDown: this._handleKeyDown,
        onMenuItemClick: this._handleMenuItemSelect,
        onRemove: this._handleSelectionRemove,
        results,
        setItem: this.setItem,
        toggleMenu: this.toggleMenu
      }));
    }
  }]);
  return Typeahead2;
}(import_react6.default.Component);
_defineProperty(Typeahead, "propTypes", propTypes2);
_defineProperty(Typeahead, "defaultProps", defaultProps);
var Typeahead_default = Typeahead;

// node_modules/react-bootstrap-typeahead/es/components/ClearButton/ClearButton.js
var import_classnames3 = __toESM(require_classnames());
var import_prop_types4 = __toESM(require_prop_types());
var import_react7 = __toESM(require_react());
var _excluded5 = ["className", "label", "onClick", "onKeyDown", "size"];
var propTypes3 = {
  label: import_prop_types4.default.string,
  onClick: import_prop_types4.default.func,
  onKeyDown: import_prop_types4.default.func,
  size: sizeType
};
var ClearButton = function ClearButton2(_ref) {
  var className = _ref.className, _ref$label = _ref.label, label = _ref$label === void 0 ? "Clear" : _ref$label, _onClick = _ref.onClick, _onKeyDown = _ref.onKeyDown, size4 = _ref.size, props = _objectWithoutProperties(_ref, _excluded5);
  return import_react7.default.createElement("button", _extends({}, props, {
    "aria-label": label,
    className: (0, import_classnames3.default)("close", "btn-close", "rbt-close", {
      "rbt-close-lg": isSizeLarge(size4),
      "rbt-close-sm": isSizeSmall(size4)
    }, className),
    onClick: function onClick(e3) {
      e3.stopPropagation();
      _onClick && _onClick(e3);
    },
    onKeyDown: function onKeyDown(e3) {
      if (e3.key === "Backspace") {
        e3.preventDefault();
      }
      _onKeyDown && _onKeyDown(e3);
    },
    type: "button"
  }), import_react7.default.createElement("span", {
    "aria-hidden": "true",
    className: "rbt-close-content"
  }, "×"), import_react7.default.createElement("span", {
    className: "sr-only visually-hidden"
  }, label));
};
ClearButton.propTypes = propTypes3;
var ClearButton_default = ClearButton;

// node_modules/react-bootstrap-typeahead/es/components/Loader/Loader.js
var import_prop_types5 = __toESM(require_prop_types());
var import_react8 = __toESM(require_react());
var propTypes4 = {
  label: import_prop_types5.default.string
};
var Loader = function Loader2(_ref) {
  var _ref$label = _ref.label, label = _ref$label === void 0 ? "Loading..." : _ref$label;
  return import_react8.default.createElement("div", {
    className: "rbt-loader spinner-border spinner-border-sm",
    role: "status"
  }, import_react8.default.createElement("span", {
    className: "sr-only visually-hidden"
  }, label));
};
Loader.propTypes = propTypes4;
var Loader_default = Loader;

// node_modules/react-bootstrap-typeahead/es/components/Overlay/Overlay.js
var import_prop_types6 = __toESM(require_prop_types());

// node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js
function _arrayWithHoles(r2) {
  if (Array.isArray(r2)) return r2;
}

// node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js
function _iterableToArrayLimit(r2, l2) {
  var t2 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
  if (null != t2) {
    var e3, n2, i, u, a = [], f = true, o3 = false;
    try {
      if (i = (t2 = t2.call(r2)).next, 0 === l2) {
        if (Object(t2) !== t2) return;
        f = false;
      } else for (; !(f = (e3 = i.call(t2)).done) && (a.push(e3.value), a.length !== l2); f = true) ;
    } catch (r3) {
      o3 = true, n2 = r3;
    } finally {
      try {
        if (!f && null != t2["return"] && (u = t2["return"](), Object(u) !== u)) return;
      } finally {
        if (o3) throw n2;
      }
    }
    return a;
  }
}

// node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js
function _arrayLikeToArray(r2, a) {
  (null == a || a > r2.length) && (a = r2.length);
  for (var e3 = 0, n2 = Array(a); e3 < a; e3++) n2[e3] = r2[e3];
  return n2;
}

// node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js
function _unsupportedIterableToArray(r2, a) {
  if (r2) {
    if ("string" == typeof r2) return _arrayLikeToArray(r2, a);
    var t2 = {}.toString.call(r2).slice(8, -1);
    return "Object" === t2 && r2.constructor && (t2 = r2.constructor.name), "Map" === t2 || "Set" === t2 ? Array.from(r2) : "Arguments" === t2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t2) ? _arrayLikeToArray(r2, a) : void 0;
  }
}

// node_modules/@babel/runtime/helpers/esm/nonIterableRest.js
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

// node_modules/@babel/runtime/helpers/esm/slicedToArray.js
function _slicedToArray(r2, e3) {
  return _arrayWithHoles(r2) || _iterableToArrayLimit(r2, e3) || _unsupportedIterableToArray(r2, e3) || _nonIterableRest();
}

// node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs
var sides = ["top", "right", "bottom", "left"];
var alignments = ["start", "end"];
var placements = sides.reduce((acc, side) => acc.concat(side, side + "-" + alignments[0], side + "-" + alignments[1]), []);
var min = Math.min;
var max = Math.max;
var round = Math.round;
var floor = Math.floor;
var createCoords = (v) => ({
  x: v,
  y: v
});
var oppositeSideMap = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
var oppositeAlignmentMap = {
  start: "end",
  end: "start"
};
function evaluate(value, param) {
  return typeof value === "function" ? value(param) : value;
}
function getSide(placement) {
  return placement.split("-")[0];
}
function getAlignment(placement) {
  return placement.split("-")[1];
}
function getOppositeAxis(axis) {
  return axis === "x" ? "y" : "x";
}
function getAxisLength(axis) {
  return axis === "y" ? "height" : "width";
}
function getSideAxis(placement) {
  return ["top", "bottom"].includes(getSide(placement)) ? "y" : "x";
}
function getAlignmentAxis(placement) {
  return getOppositeAxis(getSideAxis(placement));
}
function getAlignmentSides(placement, rects, rtl) {
  if (rtl === void 0) {
    rtl = false;
  }
  const alignment = getAlignment(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const length = getAxisLength(alignmentAxis);
  let mainAlignmentSide = alignmentAxis === "x" ? alignment === (rtl ? "end" : "start") ? "right" : "left" : alignment === "start" ? "bottom" : "top";
  if (rects.reference[length] > rects.floating[length]) {
    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
  }
  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];
}
function getExpandedPlacements(placement) {
  const oppositePlacement = getOppositePlacement(placement);
  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
}
function getOppositeAlignmentPlacement(placement) {
  return placement.replace(/start|end/g, (alignment) => oppositeAlignmentMap[alignment]);
}
function getSideList(side, isStart, rtl) {
  const lr = ["left", "right"];
  const rl = ["right", "left"];
  const tb = ["top", "bottom"];
  const bt = ["bottom", "top"];
  switch (side) {
    case "top":
    case "bottom":
      if (rtl) return isStart ? rl : lr;
      return isStart ? lr : rl;
    case "left":
    case "right":
      return isStart ? tb : bt;
    default:
      return [];
  }
}
function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
  const alignment = getAlignment(placement);
  let list = getSideList(getSide(placement), direction === "start", rtl);
  if (alignment) {
    list = list.map((side) => side + "-" + alignment);
    if (flipAlignment) {
      list = list.concat(list.map(getOppositeAlignmentPlacement));
    }
  }
  return list;
}
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, (side) => oppositeSideMap[side]);
}
function expandPaddingObject(padding) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...padding
  };
}
function getPaddingObject(padding) {
  return typeof padding !== "number" ? expandPaddingObject(padding) : {
    top: padding,
    right: padding,
    bottom: padding,
    left: padding
  };
}
function rectToClientRect(rect) {
  const {
    x,
    y,
    width,
    height
  } = rect;
  return {
    width,
    height,
    top: y,
    left: x,
    right: x + width,
    bottom: y + height,
    x,
    y
  };
}

// node_modules/@floating-ui/core/dist/floating-ui.core.mjs
function computeCoordsFromPlacement(_ref, placement, rtl) {
  let {
    reference,
    floating
  } = _ref;
  const sideAxis = getSideAxis(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const alignLength = getAxisLength(alignmentAxis);
  const side = getSide(placement);
  const isVertical = sideAxis === "y";
  const commonX = reference.x + reference.width / 2 - floating.width / 2;
  const commonY = reference.y + reference.height / 2 - floating.height / 2;
  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
  let coords;
  switch (side) {
    case "top":
      coords = {
        x: commonX,
        y: reference.y - floating.height
      };
      break;
    case "bottom":
      coords = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;
    case "right":
      coords = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;
    case "left":
      coords = {
        x: reference.x - floating.width,
        y: commonY
      };
      break;
    default:
      coords = {
        x: reference.x,
        y: reference.y
      };
  }
  switch (getAlignment(placement)) {
    case "start":
      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
      break;
    case "end":
      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
      break;
  }
  return coords;
}
var computePosition = async (reference, floating, config) => {
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware = [],
    platform: platform2
  } = config;
  const validMiddleware = middleware.filter(Boolean);
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));
  let rects = await platform2.getElementRects({
    reference,
    floating,
    strategy
  });
  let {
    x,
    y
  } = computeCoordsFromPlacement(rects, placement, rtl);
  let statefulPlacement = placement;
  let middlewareData = {};
  let resetCount = 0;
  for (let i = 0; i < validMiddleware.length; i++) {
    const {
      name,
      fn
    } = validMiddleware[i];
    const {
      x: nextX,
      y: nextY,
      data,
      reset
    } = await fn({
      x,
      y,
      initialPlacement: placement,
      placement: statefulPlacement,
      strategy,
      middlewareData,
      rects,
      platform: platform2,
      elements: {
        reference,
        floating
      }
    });
    x = nextX != null ? nextX : x;
    y = nextY != null ? nextY : y;
    middlewareData = {
      ...middlewareData,
      [name]: {
        ...middlewareData[name],
        ...data
      }
    };
    if (reset && resetCount <= 50) {
      resetCount++;
      if (typeof reset === "object") {
        if (reset.placement) {
          statefulPlacement = reset.placement;
        }
        if (reset.rects) {
          rects = reset.rects === true ? await platform2.getElementRects({
            reference,
            floating,
            strategy
          }) : reset.rects;
        }
        ({
          x,
          y
        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
      }
      i = -1;
    }
  }
  return {
    x,
    y,
    placement: statefulPlacement,
    strategy,
    middlewareData
  };
};
async function detectOverflow(state, options) {
  var _await$platform$isEle;
  if (options === void 0) {
    options = {};
  }
  const {
    x,
    y,
    platform: platform2,
    rects,
    elements,
    strategy
  } = state;
  const {
    boundary = "clippingAncestors",
    rootBoundary = "viewport",
    elementContext = "floating",
    altBoundary = false,
    padding = 0
  } = evaluate(options, state);
  const paddingObject = getPaddingObject(padding);
  const altContext = elementContext === "floating" ? "reference" : "floating";
  const element = elements[altBoundary ? altContext : elementContext];
  const clippingClientRect = rectToClientRect(await platform2.getClippingRect({
    element: ((_await$platform$isEle = await (platform2.isElement == null ? void 0 : platform2.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || await (platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)),
    boundary,
    rootBoundary,
    strategy
  }));
  const rect = elementContext === "floating" ? {
    x,
    y,
    width: rects.floating.width,
    height: rects.floating.height
  } : rects.reference;
  const offsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating));
  const offsetScale = await (platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? await (platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || {
    x: 1,
    y: 1
  } : {
    x: 1,
    y: 1
  };
  const elementClientRect = rectToClientRect(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({
    elements,
    rect,
    offsetParent,
    strategy
  }) : rect);
  return {
    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
  };
}
var flip = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "flip",
    options,
    async fn(state) {
      var _middlewareData$arrow, _middlewareData$flip;
      const {
        placement,
        middlewareData,
        rects,
        initialPlacement,
        platform: platform2,
        elements
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true,
        fallbackPlacements: specifiedFallbackPlacements,
        fallbackStrategy = "bestFit",
        fallbackAxisSideDirection = "none",
        flipAlignment = true,
        ...detectOverflowOptions
      } = evaluate(options, state);
      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      const side = getSide(placement);
      const initialSideAxis = getSideAxis(initialPlacement);
      const isBasePlacement = getSide(initialPlacement) === initialPlacement;
      const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
      const hasFallbackAxisSideDirection = fallbackAxisSideDirection !== "none";
      if (!specifiedFallbackPlacements && hasFallbackAxisSideDirection) {
        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
      }
      const placements2 = [initialPlacement, ...fallbackPlacements];
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const overflows = [];
      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
      if (checkMainAxis) {
        overflows.push(overflow[side]);
      }
      if (checkCrossAxis) {
        const sides2 = getAlignmentSides(placement, rects, rtl);
        overflows.push(overflow[sides2[0]], overflow[sides2[1]]);
      }
      overflowsData = [...overflowsData, {
        placement,
        overflows
      }];
      if (!overflows.every((side2) => side2 <= 0)) {
        var _middlewareData$flip2, _overflowsData$filter;
        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
        const nextPlacement = placements2[nextIndex];
        if (nextPlacement) {
          const ignoreCrossAxisOverflow = checkCrossAxis === "alignment" ? initialSideAxis !== getSideAxis(nextPlacement) : false;
          if (!ignoreCrossAxisOverflow || // We leave the current main axis only if every placement on that axis
          // overflows the main axis.
          overflowsData.every((d) => d.overflows[0] > 0 && getSideAxis(d.placement) === initialSideAxis)) {
            return {
              data: {
                index: nextIndex,
                overflows: overflowsData
              },
              reset: {
                placement: nextPlacement
              }
            };
          }
        }
        let resetPlacement = (_overflowsData$filter = overflowsData.filter((d) => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;
        if (!resetPlacement) {
          switch (fallbackStrategy) {
            case "bestFit": {
              var _overflowsData$filter2;
              const placement2 = (_overflowsData$filter2 = overflowsData.filter((d) => {
                if (hasFallbackAxisSideDirection) {
                  const currentSideAxis = getSideAxis(d.placement);
                  return currentSideAxis === initialSideAxis || // Create a bias to the `y` side axis due to horizontal
                  // reading directions favoring greater width.
                  currentSideAxis === "y";
                }
                return true;
              }).map((d) => [d.placement, d.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$filter2[0];
              if (placement2) {
                resetPlacement = placement2;
              }
              break;
            }
            case "initialPlacement":
              resetPlacement = initialPlacement;
              break;
          }
        }
        if (placement !== resetPlacement) {
          return {
            reset: {
              placement: resetPlacement
            }
          };
        }
      }
      return {};
    }
  };
};
var size = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "size",
    options,
    async fn(state) {
      var _state$middlewareData, _state$middlewareData2;
      const {
        placement,
        rects,
        platform: platform2,
        elements
      } = state;
      const {
        apply = () => {
        },
        ...detectOverflowOptions
      } = evaluate(options, state);
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const side = getSide(placement);
      const alignment = getAlignment(placement);
      const isYAxis = getSideAxis(placement) === "y";
      const {
        width,
        height
      } = rects.floating;
      let heightSide;
      let widthSide;
      if (side === "top" || side === "bottom") {
        heightSide = side;
        widthSide = alignment === (await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating)) ? "start" : "end") ? "left" : "right";
      } else {
        widthSide = side;
        heightSide = alignment === "end" ? "top" : "bottom";
      }
      const maximumClippingHeight = height - overflow.top - overflow.bottom;
      const maximumClippingWidth = width - overflow.left - overflow.right;
      const overflowAvailableHeight = min(height - overflow[heightSide], maximumClippingHeight);
      const overflowAvailableWidth = min(width - overflow[widthSide], maximumClippingWidth);
      const noShift = !state.middlewareData.shift;
      let availableHeight = overflowAvailableHeight;
      let availableWidth = overflowAvailableWidth;
      if ((_state$middlewareData = state.middlewareData.shift) != null && _state$middlewareData.enabled.x) {
        availableWidth = maximumClippingWidth;
      }
      if ((_state$middlewareData2 = state.middlewareData.shift) != null && _state$middlewareData2.enabled.y) {
        availableHeight = maximumClippingHeight;
      }
      if (noShift && !alignment) {
        const xMin = max(overflow.left, 0);
        const xMax = max(overflow.right, 0);
        const yMin = max(overflow.top, 0);
        const yMax = max(overflow.bottom, 0);
        if (isYAxis) {
          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));
        } else {
          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));
        }
      }
      await apply({
        ...state,
        availableWidth,
        availableHeight
      });
      const nextDimensions = await platform2.getDimensions(elements.floating);
      if (width !== nextDimensions.width || height !== nextDimensions.height) {
        return {
          reset: {
            rects: true
          }
        };
      }
      return {};
    }
  };
};

// node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs
function hasWindow() {
  return typeof window !== "undefined";
}
function getNodeName(node) {
  if (isNode(node)) {
    return (node.nodeName || "").toLowerCase();
  }
  return "#document";
}
function getWindow(node) {
  var _node$ownerDocument;
  return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
}
function getDocumentElement(node) {
  var _ref;
  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;
}
function isNode(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof Node || value instanceof getWindow(value).Node;
}
function isElement(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof Element || value instanceof getWindow(value).Element;
}
function isHTMLElement(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
}
function isShadowRoot(value) {
  if (!hasWindow() || typeof ShadowRoot === "undefined") {
    return false;
  }
  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;
}
function isOverflowElement(element) {
  const {
    overflow,
    overflowX,
    overflowY,
    display
  } = getComputedStyle2(element);
  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !["inline", "contents"].includes(display);
}
function isTableElement(element) {
  return ["table", "td", "th"].includes(getNodeName(element));
}
function isTopLayer(element) {
  return [":popover-open", ":modal"].some((selector) => {
    try {
      return element.matches(selector);
    } catch (e3) {
      return false;
    }
  });
}
function isContainingBlock(elementOrCss) {
  const webkit = isWebKit();
  const css = isElement(elementOrCss) ? getComputedStyle2(elementOrCss) : elementOrCss;
  return ["transform", "translate", "scale", "rotate", "perspective"].some((value) => css[value] ? css[value] !== "none" : false) || (css.containerType ? css.containerType !== "normal" : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== "none" : false) || !webkit && (css.filter ? css.filter !== "none" : false) || ["transform", "translate", "scale", "rotate", "perspective", "filter"].some((value) => (css.willChange || "").includes(value)) || ["paint", "layout", "strict", "content"].some((value) => (css.contain || "").includes(value));
}
function getContainingBlock(element) {
  let currentNode = getParentNode(element);
  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
    if (isContainingBlock(currentNode)) {
      return currentNode;
    } else if (isTopLayer(currentNode)) {
      return null;
    }
    currentNode = getParentNode(currentNode);
  }
  return null;
}
function isWebKit() {
  if (typeof CSS === "undefined" || !CSS.supports) return false;
  return CSS.supports("-webkit-backdrop-filter", "none");
}
function isLastTraversableNode(node) {
  return ["html", "body", "#document"].includes(getNodeName(node));
}
function getComputedStyle2(element) {
  return getWindow(element).getComputedStyle(element);
}
function getNodeScroll(element) {
  if (isElement(element)) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }
  return {
    scrollLeft: element.scrollX,
    scrollTop: element.scrollY
  };
}
function getParentNode(node) {
  if (getNodeName(node) === "html") {
    return node;
  }
  const result = (
    // Step into the shadow DOM of the parent of a slotted node.
    node.assignedSlot || // DOM Element detected.
    node.parentNode || // ShadowRoot detected.
    isShadowRoot(node) && node.host || // Fallback.
    getDocumentElement(node)
  );
  return isShadowRoot(result) ? result.host : result;
}
function getNearestOverflowAncestor(node) {
  const parentNode = getParentNode(node);
  if (isLastTraversableNode(parentNode)) {
    return node.ownerDocument ? node.ownerDocument.body : node.body;
  }
  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
    return parentNode;
  }
  return getNearestOverflowAncestor(parentNode);
}
function getOverflowAncestors(node, list, traverseIframes) {
  var _node$ownerDocument2;
  if (list === void 0) {
    list = [];
  }
  if (traverseIframes === void 0) {
    traverseIframes = true;
  }
  const scrollableAncestor = getNearestOverflowAncestor(node);
  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
  const win = getWindow(scrollableAncestor);
  if (isBody) {
    const frameElement = getFrameElement(win);
    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], frameElement && traverseIframes ? getOverflowAncestors(frameElement) : []);
  }
  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
}
function getFrameElement(win) {
  return win.parent && Object.getPrototypeOf(win.parent) ? win.frameElement : null;
}

// node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs
function getCssDimensions(element) {
  const css = getComputedStyle2(element);
  let width = parseFloat(css.width) || 0;
  let height = parseFloat(css.height) || 0;
  const hasOffset = isHTMLElement(element);
  const offsetWidth = hasOffset ? element.offsetWidth : width;
  const offsetHeight = hasOffset ? element.offsetHeight : height;
  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
  if (shouldFallback) {
    width = offsetWidth;
    height = offsetHeight;
  }
  return {
    width,
    height,
    $: shouldFallback
  };
}
function unwrapElement(element) {
  return !isElement(element) ? element.contextElement : element;
}
function getScale(element) {
  const domElement = unwrapElement(element);
  if (!isHTMLElement(domElement)) {
    return createCoords(1);
  }
  const rect = domElement.getBoundingClientRect();
  const {
    width,
    height,
    $
  } = getCssDimensions(domElement);
  let x = ($ ? round(rect.width) : rect.width) / width;
  let y = ($ ? round(rect.height) : rect.height) / height;
  if (!x || !Number.isFinite(x)) {
    x = 1;
  }
  if (!y || !Number.isFinite(y)) {
    y = 1;
  }
  return {
    x,
    y
  };
}
var noOffsets = createCoords(0);
function getVisualOffsets(element) {
  const win = getWindow(element);
  if (!isWebKit() || !win.visualViewport) {
    return noOffsets;
  }
  return {
    x: win.visualViewport.offsetLeft,
    y: win.visualViewport.offsetTop
  };
}
function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {
    return false;
  }
  return isFixed;
}
function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  const clientRect = element.getBoundingClientRect();
  const domElement = unwrapElement(element);
  let scale = createCoords(1);
  if (includeScale) {
    if (offsetParent) {
      if (isElement(offsetParent)) {
        scale = getScale(offsetParent);
      }
    } else {
      scale = getScale(element);
    }
  }
  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
  let x = (clientRect.left + visualOffsets.x) / scale.x;
  let y = (clientRect.top + visualOffsets.y) / scale.y;
  let width = clientRect.width / scale.x;
  let height = clientRect.height / scale.y;
  if (domElement) {
    const win = getWindow(domElement);
    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
    let currentWin = win;
    let currentIFrame = getFrameElement(currentWin);
    while (currentIFrame && offsetParent && offsetWin !== currentWin) {
      const iframeScale = getScale(currentIFrame);
      const iframeRect = currentIFrame.getBoundingClientRect();
      const css = getComputedStyle2(currentIFrame);
      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;
      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
      x *= iframeScale.x;
      y *= iframeScale.y;
      width *= iframeScale.x;
      height *= iframeScale.y;
      x += left;
      y += top;
      currentWin = getWindow(currentIFrame);
      currentIFrame = getFrameElement(currentWin);
    }
  }
  return rectToClientRect({
    width,
    height,
    x,
    y
  });
}
function getWindowScrollBarX(element, rect) {
  const leftScroll = getNodeScroll(element).scrollLeft;
  if (!rect) {
    return getBoundingClientRect(getDocumentElement(element)).left + leftScroll;
  }
  return rect.left + leftScroll;
}
function getHTMLOffset(documentElement, scroll, ignoreScrollbarX) {
  if (ignoreScrollbarX === void 0) {
    ignoreScrollbarX = false;
  }
  const htmlRect = documentElement.getBoundingClientRect();
  const x = htmlRect.left + scroll.scrollLeft - (ignoreScrollbarX ? 0 : (
    // RTL <body> scrollbar.
    getWindowScrollBarX(documentElement, htmlRect)
  ));
  const y = htmlRect.top + scroll.scrollTop;
  return {
    x,
    y
  };
}
function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
  let {
    elements,
    rect,
    offsetParent,
    strategy
  } = _ref;
  const isFixed = strategy === "fixed";
  const documentElement = getDocumentElement(offsetParent);
  const topLayer = elements ? isTopLayer(elements.floating) : false;
  if (offsetParent === documentElement || topLayer && isFixed) {
    return rect;
  }
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  let scale = createCoords(1);
  const offsets = createCoords(0);
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      const offsetRect = getBoundingClientRect(offsetParent);
      scale = getScale(offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    }
  }
  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll, true) : createCoords(0);
  return {
    width: rect.width * scale.x,
    height: rect.height * scale.y,
    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x + htmlOffset.x,
    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y + htmlOffset.y
  };
}
function getClientRects(element) {
  return Array.from(element.getClientRects());
}
function getDocumentRect(element) {
  const html = getDocumentElement(element);
  const scroll = getNodeScroll(element);
  const body = element.ownerDocument.body;
  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);
  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);
  let x = -scroll.scrollLeft + getWindowScrollBarX(element);
  const y = -scroll.scrollTop;
  if (getComputedStyle2(body).direction === "rtl") {
    x += max(html.clientWidth, body.clientWidth) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}
function getViewportRect(element, strategy) {
  const win = getWindow(element);
  const html = getDocumentElement(element);
  const visualViewport = win.visualViewport;
  let width = html.clientWidth;
  let height = html.clientHeight;
  let x = 0;
  let y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    const visualViewportBased = isWebKit();
    if (!visualViewportBased || visualViewportBased && strategy === "fixed") {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x,
    y
  };
}
function getInnerBoundingClientRect(element, strategy) {
  const clientRect = getBoundingClientRect(element, true, strategy === "fixed");
  const top = clientRect.top + element.clientTop;
  const left = clientRect.left + element.clientLeft;
  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);
  const width = element.clientWidth * scale.x;
  const height = element.clientHeight * scale.y;
  const x = left * scale.x;
  const y = top * scale.y;
  return {
    width,
    height,
    x,
    y
  };
}
function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
  let rect;
  if (clippingAncestor === "viewport") {
    rect = getViewportRect(element, strategy);
  } else if (clippingAncestor === "document") {
    rect = getDocumentRect(getDocumentElement(element));
  } else if (isElement(clippingAncestor)) {
    rect = getInnerBoundingClientRect(clippingAncestor, strategy);
  } else {
    const visualOffsets = getVisualOffsets(element);
    rect = {
      x: clippingAncestor.x - visualOffsets.x,
      y: clippingAncestor.y - visualOffsets.y,
      width: clippingAncestor.width,
      height: clippingAncestor.height
    };
  }
  return rectToClientRect(rect);
}
function hasFixedPositionAncestor(element, stopNode) {
  const parentNode = getParentNode(element);
  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {
    return false;
  }
  return getComputedStyle2(parentNode).position === "fixed" || hasFixedPositionAncestor(parentNode, stopNode);
}
function getClippingElementAncestors(element, cache) {
  const cachedResult = cache.get(element);
  if (cachedResult) {
    return cachedResult;
  }
  let result = getOverflowAncestors(element, [], false).filter((el) => isElement(el) && getNodeName(el) !== "body");
  let currentContainingBlockComputedStyle = null;
  const elementIsFixed = getComputedStyle2(element).position === "fixed";
  let currentNode = elementIsFixed ? getParentNode(element) : element;
  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
    const computedStyle = getComputedStyle2(currentNode);
    const currentNodeIsContaining = isContainingBlock(currentNode);
    if (!currentNodeIsContaining && computedStyle.position === "fixed") {
      currentContainingBlockComputedStyle = null;
    }
    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);
    if (shouldDropCurrentNode) {
      result = result.filter((ancestor) => ancestor !== currentNode);
    } else {
      currentContainingBlockComputedStyle = computedStyle;
    }
    currentNode = getParentNode(currentNode);
  }
  cache.set(element, result);
  return result;
}
function getClippingRect(_ref) {
  let {
    element,
    boundary,
    rootBoundary,
    strategy
  } = _ref;
  const elementClippingAncestors = boundary === "clippingAncestors" ? isTopLayer(element) ? [] : getClippingElementAncestors(element, this._c) : [].concat(boundary);
  const clippingAncestors = [...elementClippingAncestors, rootBoundary];
  const firstClippingAncestor = clippingAncestors[0];
  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
  return {
    width: clippingRect.right - clippingRect.left,
    height: clippingRect.bottom - clippingRect.top,
    x: clippingRect.left,
    y: clippingRect.top
  };
}
function getDimensions(element) {
  const {
    width,
    height
  } = getCssDimensions(element);
  return {
    width,
    height
  };
}
function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  const isFixed = strategy === "fixed";
  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = createCoords(0);
  function setLeftRTLScrollbarOffset() {
    offsets.x = getWindowScrollBarX(documentElement);
  }
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isOffsetParentAnElement) {
      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    } else if (documentElement) {
      setLeftRTLScrollbarOffset();
    }
  }
  if (isFixed && !isOffsetParentAnElement && documentElement) {
    setLeftRTLScrollbarOffset();
  }
  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll) : createCoords(0);
  const x = rect.left + scroll.scrollLeft - offsets.x - htmlOffset.x;
  const y = rect.top + scroll.scrollTop - offsets.y - htmlOffset.y;
  return {
    x,
    y,
    width: rect.width,
    height: rect.height
  };
}
function isStaticPositioned(element) {
  return getComputedStyle2(element).position === "static";
}
function getTrueOffsetParent(element, polyfill) {
  if (!isHTMLElement(element) || getComputedStyle2(element).position === "fixed") {
    return null;
  }
  if (polyfill) {
    return polyfill(element);
  }
  let rawOffsetParent = element.offsetParent;
  if (getDocumentElement(element) === rawOffsetParent) {
    rawOffsetParent = rawOffsetParent.ownerDocument.body;
  }
  return rawOffsetParent;
}
function getOffsetParent(element, polyfill) {
  const win = getWindow(element);
  if (isTopLayer(element)) {
    return win;
  }
  if (!isHTMLElement(element)) {
    let svgOffsetParent = getParentNode(element);
    while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {
      if (isElement(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {
        return svgOffsetParent;
      }
      svgOffsetParent = getParentNode(svgOffsetParent);
    }
    return win;
  }
  let offsetParent = getTrueOffsetParent(element, polyfill);
  while (offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)) {
    offsetParent = getTrueOffsetParent(offsetParent, polyfill);
  }
  if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {
    return win;
  }
  return offsetParent || getContainingBlock(element) || win;
}
var getElementRects = async function(data) {
  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
  const getDimensionsFn = this.getDimensions;
  const floatingDimensions = await getDimensionsFn(data.floating);
  return {
    reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),
    floating: {
      x: 0,
      y: 0,
      width: floatingDimensions.width,
      height: floatingDimensions.height
    }
  };
};
function isRTL(element) {
  return getComputedStyle2(element).direction === "rtl";
}
var platform = {
  convertOffsetParentRelativeRectToViewportRelativeRect,
  getDocumentElement,
  getClippingRect,
  getOffsetParent,
  getElementRects,
  getClientRects,
  getDimensions,
  getScale,
  isElement,
  isRTL
};
function rectsAreEqual(a, b) {
  return a.x === b.x && a.y === b.y && a.width === b.width && a.height === b.height;
}
function observeMove(element, onMove) {
  let io = null;
  let timeoutId;
  const root = getDocumentElement(element);
  function cleanup() {
    var _io;
    clearTimeout(timeoutId);
    (_io = io) == null || _io.disconnect();
    io = null;
  }
  function refresh(skip, threshold) {
    if (skip === void 0) {
      skip = false;
    }
    if (threshold === void 0) {
      threshold = 1;
    }
    cleanup();
    const elementRectForRootMargin = element.getBoundingClientRect();
    const {
      left,
      top,
      width,
      height
    } = elementRectForRootMargin;
    if (!skip) {
      onMove();
    }
    if (!width || !height) {
      return;
    }
    const insetTop = floor(top);
    const insetRight = floor(root.clientWidth - (left + width));
    const insetBottom = floor(root.clientHeight - (top + height));
    const insetLeft = floor(left);
    const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
    const options = {
      rootMargin,
      threshold: max(0, min(1, threshold)) || 1
    };
    let isFirstUpdate = true;
    function handleObserve(entries) {
      const ratio = entries[0].intersectionRatio;
      if (ratio !== threshold) {
        if (!isFirstUpdate) {
          return refresh();
        }
        if (!ratio) {
          timeoutId = setTimeout(() => {
            refresh(false, 1e-7);
          }, 1e3);
        } else {
          refresh(false, ratio);
        }
      }
      if (ratio === 1 && !rectsAreEqual(elementRectForRootMargin, element.getBoundingClientRect())) {
        refresh();
      }
      isFirstUpdate = false;
    }
    try {
      io = new IntersectionObserver(handleObserve, {
        ...options,
        // Handle <iframe>s
        root: root.ownerDocument
      });
    } catch (_e) {
      io = new IntersectionObserver(handleObserve, options);
    }
    io.observe(element);
  }
  refresh(true);
  return cleanup;
}
function autoUpdate(reference, floating, update, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    ancestorScroll = true,
    ancestorResize = true,
    elementResize = typeof ResizeObserver === "function",
    layoutShift = typeof IntersectionObserver === "function",
    animationFrame = false
  } = options;
  const referenceEl = unwrapElement(reference);
  const ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors(referenceEl) : [], ...getOverflowAncestors(floating)] : [];
  ancestors.forEach((ancestor) => {
    ancestorScroll && ancestor.addEventListener("scroll", update, {
      passive: true
    });
    ancestorResize && ancestor.addEventListener("resize", update);
  });
  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;
  let reobserveFrame = -1;
  let resizeObserver = null;
  if (elementResize) {
    resizeObserver = new ResizeObserver((_ref) => {
      let [firstEntry] = _ref;
      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
        resizeObserver.unobserve(floating);
        cancelAnimationFrame(reobserveFrame);
        reobserveFrame = requestAnimationFrame(() => {
          var _resizeObserver;
          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);
        });
      }
      update();
    });
    if (referenceEl && !animationFrame) {
      resizeObserver.observe(referenceEl);
    }
    resizeObserver.observe(floating);
  }
  let frameId;
  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
  if (animationFrame) {
    frameLoop();
  }
  function frameLoop() {
    const nextRefRect = getBoundingClientRect(reference);
    if (prevRefRect && !rectsAreEqual(prevRefRect, nextRefRect)) {
      update();
    }
    prevRefRect = nextRefRect;
    frameId = requestAnimationFrame(frameLoop);
  }
  update();
  return () => {
    var _resizeObserver2;
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.removeEventListener("scroll", update);
      ancestorResize && ancestor.removeEventListener("resize", update);
    });
    cleanupIo == null || cleanupIo();
    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();
    resizeObserver = null;
    if (animationFrame) {
      cancelAnimationFrame(frameId);
    }
  };
}
var flip2 = flip;
var size2 = size;
var computePosition2 = (reference, floating, options) => {
  const cache = /* @__PURE__ */ new Map();
  const mergedOptions = {
    platform,
    ...options
  };
  const platformWithCache = {
    ...mergedOptions.platform,
    _c: cache
  };
  return computePosition(reference, floating, {
    ...mergedOptions,
    platform: platformWithCache
  });
};

// node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs
var React6 = __toESM(require_react(), 1);
var import_react9 = __toESM(require_react(), 1);
var ReactDOM = __toESM(require_react_dom(), 1);
var isClient = typeof document !== "undefined";
var noop2 = function noop3() {
};
var index = isClient ? import_react9.useLayoutEffect : noop2;
function deepEqual(a, b) {
  if (a === b) {
    return true;
  }
  if (typeof a !== typeof b) {
    return false;
  }
  if (typeof a === "function" && a.toString() === b.toString()) {
    return true;
  }
  let length;
  let i;
  let keys;
  if (a && b && typeof a === "object") {
    if (Array.isArray(a)) {
      length = a.length;
      if (length !== b.length) return false;
      for (i = length; i-- !== 0; ) {
        if (!deepEqual(a[i], b[i])) {
          return false;
        }
      }
      return true;
    }
    keys = Object.keys(a);
    length = keys.length;
    if (length !== Object.keys(b).length) {
      return false;
    }
    for (i = length; i-- !== 0; ) {
      if (!{}.hasOwnProperty.call(b, keys[i])) {
        return false;
      }
    }
    for (i = length; i-- !== 0; ) {
      const key = keys[i];
      if (key === "_owner" && a.$$typeof) {
        continue;
      }
      if (!deepEqual(a[key], b[key])) {
        return false;
      }
    }
    return true;
  }
  return a !== a && b !== b;
}
function getDPR(element) {
  if (typeof window === "undefined") {
    return 1;
  }
  const win = element.ownerDocument.defaultView || window;
  return win.devicePixelRatio || 1;
}
function roundByDPR(element, value) {
  const dpr = getDPR(element);
  return Math.round(value * dpr) / dpr;
}
function useLatestRef(value) {
  const ref = React6.useRef(value);
  index(() => {
    ref.current = value;
  });
  return ref;
}
function useFloating(options) {
  if (options === void 0) {
    options = {};
  }
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware = [],
    platform: platform2,
    elements: {
      reference: externalReference,
      floating: externalFloating
    } = {},
    transform = true,
    whileElementsMounted,
    open
  } = options;
  const [data, setData] = React6.useState({
    x: 0,
    y: 0,
    strategy,
    placement,
    middlewareData: {},
    isPositioned: false
  });
  const [latestMiddleware, setLatestMiddleware] = React6.useState(middleware);
  if (!deepEqual(latestMiddleware, middleware)) {
    setLatestMiddleware(middleware);
  }
  const [_reference, _setReference] = React6.useState(null);
  const [_floating, _setFloating] = React6.useState(null);
  const setReference = React6.useCallback((node) => {
    if (node !== referenceRef.current) {
      referenceRef.current = node;
      _setReference(node);
    }
  }, []);
  const setFloating = React6.useCallback((node) => {
    if (node !== floatingRef.current) {
      floatingRef.current = node;
      _setFloating(node);
    }
  }, []);
  const referenceEl = externalReference || _reference;
  const floatingEl = externalFloating || _floating;
  const referenceRef = React6.useRef(null);
  const floatingRef = React6.useRef(null);
  const dataRef = React6.useRef(data);
  const hasWhileElementsMounted = whileElementsMounted != null;
  const whileElementsMountedRef = useLatestRef(whileElementsMounted);
  const platformRef = useLatestRef(platform2);
  const openRef = useLatestRef(open);
  const update = React6.useCallback(() => {
    if (!referenceRef.current || !floatingRef.current) {
      return;
    }
    const config = {
      placement,
      strategy,
      middleware: latestMiddleware
    };
    if (platformRef.current) {
      config.platform = platformRef.current;
    }
    computePosition2(referenceRef.current, floatingRef.current, config).then((data2) => {
      const fullData = {
        ...data2,
        // The floating element's position may be recomputed while it's closed
        // but still mounted (such as when transitioning out). To ensure
        // `isPositioned` will be `false` initially on the next open, avoid
        // setting it to `true` when `open === false` (must be specified).
        isPositioned: openRef.current !== false
      };
      if (isMountedRef.current && !deepEqual(dataRef.current, fullData)) {
        dataRef.current = fullData;
        ReactDOM.flushSync(() => {
          setData(fullData);
        });
      }
    });
  }, [latestMiddleware, placement, strategy, platformRef, openRef]);
  index(() => {
    if (open === false && dataRef.current.isPositioned) {
      dataRef.current.isPositioned = false;
      setData((data2) => ({
        ...data2,
        isPositioned: false
      }));
    }
  }, [open]);
  const isMountedRef = React6.useRef(false);
  index(() => {
    isMountedRef.current = true;
    return () => {
      isMountedRef.current = false;
    };
  }, []);
  index(() => {
    if (referenceEl) referenceRef.current = referenceEl;
    if (floatingEl) floatingRef.current = floatingEl;
    if (referenceEl && floatingEl) {
      if (whileElementsMountedRef.current) {
        return whileElementsMountedRef.current(referenceEl, floatingEl, update);
      }
      update();
    }
  }, [referenceEl, floatingEl, update, whileElementsMountedRef, hasWhileElementsMounted]);
  const refs = React6.useMemo(() => ({
    reference: referenceRef,
    floating: floatingRef,
    setReference,
    setFloating
  }), [setReference, setFloating]);
  const elements = React6.useMemo(() => ({
    reference: referenceEl,
    floating: floatingEl
  }), [referenceEl, floatingEl]);
  const floatingStyles = React6.useMemo(() => {
    const initialStyles = {
      position: strategy,
      left: 0,
      top: 0
    };
    if (!elements.floating) {
      return initialStyles;
    }
    const x = roundByDPR(elements.floating, data.x);
    const y = roundByDPR(elements.floating, data.y);
    if (transform) {
      return {
        ...initialStyles,
        transform: "translate(" + x + "px, " + y + "px)",
        ...getDPR(elements.floating) >= 1.5 && {
          willChange: "transform"
        }
      };
    }
    return {
      position: strategy,
      left: x,
      top: y
    };
  }, [strategy, transform, elements.floating, data.x, data.y]);
  return React6.useMemo(() => ({
    ...data,
    update,
    refs,
    elements,
    floatingStyles
  }), [data, update, refs, elements, floatingStyles]);
}
var flip3 = (options, deps) => ({
  ...flip2(options),
  options: [options, deps]
});
var size3 = (options, deps) => ({
  ...size2(options),
  options: [options, deps]
});

// node_modules/react-bootstrap-typeahead/es/components/Overlay/useOverlay.js
var import_react10 = __toESM(require_react());
function getMiddleware(props) {
  var middleware = [];
  if (props.flip) {
    middleware.push(flip3());
  }
  if (props.align !== "right" && props.align !== "left") {
    middleware.push(size3({
      apply: function apply(_ref) {
        var rects = _ref.rects, elements = _ref.elements;
        Object.assign(elements.floating.style, {
          width: "".concat(rects.reference.width, "px")
        });
      }
    }));
  }
  return middleware;
}
function getPlacement(props) {
  var x = props.align === "right" ? "end" : "start";
  var y = props.dropup ? "top" : "bottom";
  return "".concat(y, "-").concat(x);
}
function useOverlay(referenceElement, options) {
  var _useState = (0, import_react10.useState)(null), _useState2 = _slicedToArray(_useState, 2), floatingElement = _useState2[0], attachRef = _useState2[1];
  var _useFloating = useFloating({
    elements: {
      floating: floatingElement,
      reference: referenceElement
    },
    middleware: getMiddleware(options),
    placement: getPlacement(options),
    strategy: options.positionFixed ? "fixed" : "absolute",
    whileElementsMounted: autoUpdate
  }), floatingStyles = _useFloating.floatingStyles;
  return {
    innerRef: attachRef,
    style: floatingStyles
  };
}
var useOverlay_default = useOverlay;

// node_modules/react-bootstrap-typeahead/es/components/Overlay/Overlay.js
var _excluded6 = ["referenceElement", "isMenuShown"];
var SafeElement = typeof Element === "undefined" ? noop : Element;
var propTypes5 = {
  /**
   * Specify menu alignment. The default value is `justify`, which makes the
   * menu as wide as the input and truncates long values. Specifying `left`
   * or `right` will align the menu to that side and the width will be
   * determined by the length of menu item values.
   */
  align: import_prop_types6.default.oneOf(ALIGN_VALUES),
  children: import_prop_types6.default.func.isRequired,
  /**
   * Specify whether the menu should appear above the input.
   */
  dropup: import_prop_types6.default.bool,
  /**
   * Whether or not to automatically adjust the position of the menu when it
   * reaches the viewport boundaries.
   */
  flip: import_prop_types6.default.bool,
  isMenuShown: import_prop_types6.default.bool,
  positionFixed: import_prop_types6.default.bool,
  // @ts-ignore
  referenceElement: import_prop_types6.default.instanceOf(SafeElement)
};
var Overlay = function Overlay2(_ref) {
  var referenceElement = _ref.referenceElement, isMenuShown = _ref.isMenuShown, props = _objectWithoutProperties(_ref, _excluded6);
  var overlayProps = useOverlay_default(referenceElement, props);
  if (!isMenuShown) {
    return null;
  }
  return props.children(overlayProps);
};
Overlay.propTypes = propTypes5;
var Overlay_default = Overlay;

// node_modules/react-bootstrap-typeahead/es/components/RootClose/useRootClose.js
var import_react15 = __toESM(require_react());

// node_modules/dom-helpers/esm/canUseDOM.js
var canUseDOM_default = !!(typeof window !== "undefined" && window.document && window.document.createElement);

// node_modules/dom-helpers/esm/addEventListener.js
var optionsSupported = false;
var onceSupported = false;
try {
  options = {
    get passive() {
      return optionsSupported = true;
    },
    get once() {
      return onceSupported = optionsSupported = true;
    }
  };
  if (canUseDOM_default) {
    window.addEventListener("test", options, options);
    window.removeEventListener("test", options, true);
  }
} catch (e3) {
}
var options;
function addEventListener(node, eventName, handler, options) {
  if (options && typeof options !== "boolean" && !onceSupported) {
    var once = options.once, capture = options.capture;
    var wrappedHandler = handler;
    if (!onceSupported && once) {
      wrappedHandler = handler.__once || function onceHandler(event) {
        this.removeEventListener(eventName, onceHandler, capture);
        handler.call(this, event);
      };
      handler.__once = wrappedHandler;
    }
    node.addEventListener(eventName, wrappedHandler, optionsSupported ? options : capture);
  }
  node.addEventListener(eventName, handler, options);
}
var addEventListener_default = addEventListener;

// node_modules/dom-helpers/esm/removeEventListener.js
function removeEventListener(node, eventName, handler, options) {
  var capture = options && typeof options !== "boolean" ? options.capture : options;
  node.removeEventListener(eventName, handler, capture);
  if (handler.__once) {
    node.removeEventListener(eventName, handler.__once, capture);
  }
}
var removeEventListener_default = removeEventListener;

// node_modules/dom-helpers/esm/listen.js
function listen(node, eventName, handler, options) {
  addEventListener_default(node, eventName, handler, options);
  return function() {
    removeEventListener_default(node, eventName, handler, options);
  };
}
var listen_default = listen;

// node_modules/dom-helpers/esm/ownerDocument.js
function ownerDocument(node) {
  return node && node.ownerDocument || document;
}

// node_modules/@restart/ui/esm/useRootClose.js
var import_react14 = __toESM(require_react());

// node_modules/@restart/ui/node_modules/@restart/hooks/esm/useEventCallback.js
var import_react12 = __toESM(require_react());

// node_modules/@restart/ui/node_modules/@restart/hooks/esm/useCommittedRef.js
var import_react11 = __toESM(require_react());
function useCommittedRef(value) {
  const ref = (0, import_react11.useRef)(value);
  (0, import_react11.useEffect)(() => {
    ref.current = value;
  }, [value]);
  return ref;
}
var useCommittedRef_default = useCommittedRef;

// node_modules/@restart/ui/node_modules/@restart/hooks/esm/useEventCallback.js
function useEventCallback(fn) {
  const ref = useCommittedRef_default(fn);
  return (0, import_react12.useCallback)(function(...args) {
    return ref.current && ref.current(...args);
  }, [ref]);
}

// node_modules/dom-helpers/esm/contains.js
function contains(context, node) {
  if (context.contains) return context.contains(node);
  if (context.compareDocumentPosition) return context === node || !!(context.compareDocumentPosition(node) & 16);
}

// node_modules/@restart/ui/esm/useClickOutside.js
var import_react13 = __toESM(require_react());
var import_warning2 = __toESM(require_warning());
var noop4 = () => {
};
function isLeftClickEvent(event) {
  return event.button === 0;
}
function isModifiedEvent(event) {
  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}
var getRefTarget = (ref) => ref && ("current" in ref ? ref.current : ref);
var InitialTriggerEvents = {
  click: "mousedown",
  mouseup: "mousedown",
  pointerup: "pointerdown"
};
function useClickOutside(ref, onClickOutside = noop4, {
  disabled,
  clickTrigger = "click"
} = {}) {
  const preventMouseClickOutsideRef = (0, import_react13.useRef)(false);
  const waitingForTrigger = (0, import_react13.useRef)(false);
  const handleMouseCapture = (0, import_react13.useCallback)((e3) => {
    const currentTarget = getRefTarget(ref);
    (0, import_warning2.default)(!!currentTarget, "ClickOutside captured a close event but does not have a ref to compare it to. useClickOutside(), should be passed a ref that resolves to a DOM node");
    preventMouseClickOutsideRef.current = !currentTarget || isModifiedEvent(e3) || !isLeftClickEvent(e3) || !!contains(currentTarget, e3.target) || waitingForTrigger.current;
    waitingForTrigger.current = false;
  }, [ref]);
  const handleInitialMouse = useEventCallback((e3) => {
    const currentTarget = getRefTarget(ref);
    if (currentTarget && contains(currentTarget, e3.target)) {
      waitingForTrigger.current = true;
    } else {
      waitingForTrigger.current = false;
    }
  });
  const handleMouse = useEventCallback((e3) => {
    if (!preventMouseClickOutsideRef.current) {
      onClickOutside(e3);
    }
  });
  (0, import_react13.useEffect)(() => {
    var _ownerWindow$event, _ownerWindow$parent;
    if (disabled || ref == null) return void 0;
    const doc = ownerDocument(getRefTarget(ref));
    const ownerWindow = doc.defaultView || window;
    let currentEvent = (_ownerWindow$event = ownerWindow.event) != null ? _ownerWindow$event : (_ownerWindow$parent = ownerWindow.parent) == null ? void 0 : _ownerWindow$parent.event;
    let removeInitialTriggerListener = null;
    if (InitialTriggerEvents[clickTrigger]) {
      removeInitialTriggerListener = listen_default(doc, InitialTriggerEvents[clickTrigger], handleInitialMouse, true);
    }
    const removeMouseCaptureListener = listen_default(doc, clickTrigger, handleMouseCapture, true);
    const removeMouseListener = listen_default(doc, clickTrigger, (e3) => {
      if (e3 === currentEvent) {
        currentEvent = void 0;
        return;
      }
      handleMouse(e3);
    });
    let mobileSafariHackListeners = [];
    if ("ontouchstart" in doc.documentElement) {
      mobileSafariHackListeners = [].slice.call(doc.body.children).map((el) => listen_default(el, "mousemove", noop4));
    }
    return () => {
      removeInitialTriggerListener == null ? void 0 : removeInitialTriggerListener();
      removeMouseCaptureListener();
      removeMouseListener();
      mobileSafariHackListeners.forEach((remove) => remove());
    };
  }, [ref, disabled, clickTrigger, handleMouseCapture, handleInitialMouse, handleMouse]);
}
var useClickOutside_default = useClickOutside;

// node_modules/@restart/ui/esm/utils.js
var React7 = __toESM(require_react());
function isEscKey(e3) {
  return e3.code === "Escape" || e3.keyCode === 27;
}

// node_modules/@restart/ui/esm/useRootClose.js
var noop5 = () => {
};
function useRootClose(ref, onRootClose, {
  disabled,
  clickTrigger
} = {}) {
  const onClose = onRootClose || noop5;
  useClickOutside_default(ref, onClose, {
    disabled,
    clickTrigger
  });
  const handleKeyUp = useEventCallback((e3) => {
    if (isEscKey(e3)) {
      onClose(e3);
    }
  });
  (0, import_react14.useEffect)(() => {
    if (disabled || ref == null) return void 0;
    const doc = ownerDocument(getRefTarget(ref));
    let currentEvent = (doc.defaultView || window).event;
    const removeKeyupListener = listen_default(doc, "keyup", (e3) => {
      if (e3 === currentEvent) {
        currentEvent = void 0;
        return;
      }
      handleKeyUp(e3);
    });
    return () => {
      removeKeyupListener();
    };
  }, [ref, disabled, handleKeyUp]);
}
var useRootClose_default = useRootClose;

// node_modules/react-bootstrap-typeahead/es/components/RootClose/useRootClose.js
function useRootClose2(onRootClose, options) {
  var ref = (0, import_react15.useRef)(null);
  useRootClose_default(ref, onRootClose, options);
  return ref;
}
var useRootClose_default2 = useRootClose2;

// node_modules/react-bootstrap-typeahead/es/components/RootClose/RootClose.js
var _excluded7 = ["children", "onRootClose"];
function RootClose(_ref) {
  var children = _ref.children, onRootClose = _ref.onRootClose, props = _objectWithoutProperties(_ref, _excluded7);
  var rootRef = useRootClose_default2(onRootClose, props);
  return children(rootRef);
}
var RootClose_default = RootClose;

// node_modules/react-bootstrap-typeahead/es/components/Token/Token.js
var import_classnames4 = __toESM(require_classnames());
var import_react17 = __toESM(require_react());

// node_modules/react-bootstrap-typeahead/es/behaviors/token.js
var import_prop_types7 = __toESM(require_prop_types());
var import_react16 = __toESM(require_react());
var _excluded8 = ["onBlur", "onClick", "onFocus", "onRemove", "option"];
function ownKeys7(e3, r2) {
  var t2 = Object.keys(e3);
  if (Object.getOwnPropertySymbols) {
    var o3 = Object.getOwnPropertySymbols(e3);
    r2 && (o3 = o3.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
    })), t2.push.apply(t2, o3);
  }
  return t2;
}
function _objectSpread7(e3) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys7(Object(t2), true).forEach(function(r3) {
      _defineProperty(e3, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys7(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e3;
}
var propTypes6 = {
  onBlur: import_prop_types7.default.func,
  onClick: import_prop_types7.default.func,
  onFocus: import_prop_types7.default.func,
  onRemove: import_prop_types7.default.func,
  option: optionType.isRequired
};
function useToken(_ref) {
  var onBlur = _ref.onBlur, onClick = _ref.onClick, onFocus = _ref.onFocus, onRemove = _ref.onRemove, option = _ref.option, props = _objectWithoutProperties(_ref, _excluded8);
  var _useState = (0, import_react16.useState)(false), _useState2 = _slicedToArray(_useState, 2), active = _useState2[0], setActive = _useState2[1];
  var handleBlur = function handleBlur2(e3) {
    setActive(false);
    onBlur && onBlur(e3);
  };
  var handleClick = function handleClick2(e3) {
    setActive(true);
    onClick && onClick(e3);
  };
  var handleFocus = function handleFocus2(e3) {
    setActive(true);
    onFocus && onFocus(e3);
  };
  var handleRemove = function handleRemove2() {
    onRemove && onRemove(option);
  };
  var handleKeyDown = function handleKeyDown2(e3) {
    if (e3.key === "Backspace" && active) {
      e3.preventDefault();
      handleRemove();
    }
  };
  var attachRef = useRootClose_default2(handleBlur, _objectSpread7(_objectSpread7({}, props), {}, {
    disabled: !active
  }));
  return {
    active,
    onBlur: handleBlur,
    onClick: handleClick,
    onFocus: handleFocus,
    onKeyDown: handleKeyDown,
    onRemove: isFunction(onRemove) ? handleRemove : void 0,
    ref: attachRef
  };
}
function withToken(Component) {
  warn(false, "Warning: `withToken` is deprecated and will be removed in the next major version. Use `useToken` instead.");
  var displayName = "withToken(".concat(getDisplayName(Component), ")");
  var WrappedToken = function WrappedToken2(props) {
    return import_react16.default.createElement(Component, _extends({}, props, useToken(props)));
  };
  WrappedToken.displayName = displayName;
  WrappedToken.propTypes = propTypes6;
  return WrappedToken;
}

// node_modules/react-bootstrap-typeahead/es/components/Token/Token.js
var _excluded9 = ["active", "children", "className", "onRemove", "tabIndex"];
var _excluded22 = ["children", "option", "readOnly"];
var _excluded32 = ["ref"];
function ownKeys8(e3, r2) {
  var t2 = Object.keys(e3);
  if (Object.getOwnPropertySymbols) {
    var o3 = Object.getOwnPropertySymbols(e3);
    r2 && (o3 = o3.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
    })), t2.push.apply(t2, o3);
  }
  return t2;
}
function _objectSpread8(e3) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys8(Object(t2), true).forEach(function(r3) {
      _defineProperty(e3, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys8(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e3;
}
var InteractiveToken = (0, import_react17.forwardRef)(function(_ref, ref) {
  var active = _ref.active, children = _ref.children, className = _ref.className, onRemove = _ref.onRemove, tabIndex = _ref.tabIndex, props = _objectWithoutProperties(_ref, _excluded9);
  return import_react17.default.createElement("div", _extends({}, props, {
    className: (0, import_classnames4.default)("rbt-token", "rbt-token-removeable", {
      "rbt-token-active": !!active
    }, className),
    ref,
    tabIndex: tabIndex || 0
  }), children, import_react17.default.createElement(ClearButton_default, {
    className: "rbt-token-remove-button",
    label: "Remove",
    onClick: onRemove,
    tabIndex: -1
  }));
});
var StaticToken = function StaticToken2(_ref2) {
  var children = _ref2.children, className = _ref2.className, disabled = _ref2.disabled, href = _ref2.href;
  var classnames = (0, import_classnames4.default)("rbt-token", {
    "rbt-token-disabled": disabled
  }, className);
  if (href && !disabled) {
    return import_react17.default.createElement("a", {
      className: classnames,
      href
    }, children);
  }
  return import_react17.default.createElement("div", {
    className: classnames
  }, children);
};
var Token = function Token2(_ref3) {
  var children = _ref3.children, option = _ref3.option, readOnly = _ref3.readOnly, props = _objectWithoutProperties(_ref3, _excluded22);
  var _useToken = useToken(_objectSpread8(_objectSpread8({}, props), {}, {
    option
  })), ref = _useToken.ref, tokenProps = _objectWithoutProperties(_useToken, _excluded32);
  var child = import_react17.default.createElement("div", {
    className: "rbt-token-label"
  }, children);
  return !props.disabled && !readOnly && isFunction(tokenProps.onRemove) ? import_react17.default.createElement(InteractiveToken, _extends({}, props, tokenProps, {
    ref
  }), child) : import_react17.default.createElement(StaticToken, props, child);
};
var Token_default = Token;

// node_modules/react-bootstrap-typeahead/es/components/TypeaheadInputMulti/TypeaheadInputMulti.js
var import_classnames6 = __toESM(require_classnames());
var import_react20 = __toESM(require_react());

// node_modules/react-bootstrap-typeahead/es/components/Hint/Hint.js
var import_react18 = __toESM(require_react());
function interpolateStyle(styles, attr) {
  var subattr = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "";
  if (subattr) {
    subattr = subattr.replace(subattr[0], subattr[0].toUpperCase());
  }
  return ["Top", "Right", "Bottom", "Left"].map(function(dir) {
    return styles["".concat(attr).concat(dir).concat(subattr)];
  }).join(" ");
}
function copyStyles(inputNode, hintNode) {
  var inputStyle = window.getComputedStyle(inputNode);
  hintNode.style.borderStyle = interpolateStyle(inputStyle, "border", "style");
  hintNode.style.borderWidth = interpolateStyle(inputStyle, "border", "width");
  hintNode.style.fontSize = inputStyle.fontSize;
  hintNode.style.fontWeight = inputStyle.fontWeight;
  hintNode.style.height = inputStyle.height;
  hintNode.style.lineHeight = inputStyle.lineHeight;
  hintNode.style.margin = interpolateStyle(inputStyle, "margin");
  hintNode.style.padding = interpolateStyle(inputStyle, "padding");
}
var useHint = function useHint2() {
  var _useTypeaheadContext = useTypeaheadContext(), hintText = _useTypeaheadContext.hintText, inputNode = _useTypeaheadContext.inputNode;
  var hintRef = (0, import_react18.useRef)(null);
  (0, import_react18.useEffect)(function() {
    var handleInputScroll = function handleInputScroll2() {
      if (hintRef.current && inputNode) {
        hintRef.current.scrollLeft = inputNode.scrollLeft;
      }
    };
    inputNode === null || inputNode === void 0 || inputNode.addEventListener("scroll", handleInputScroll);
    return function() {
      inputNode === null || inputNode === void 0 || inputNode.removeEventListener("scroll", handleInputScroll);
    };
  }, [inputNode]);
  (0, import_react18.useEffect)(function() {
    if (inputNode && hintRef.current) {
      copyStyles(inputNode, hintRef.current);
    }
  });
  return {
    hintRef,
    hintText
  };
};
var Hint = function Hint2(_ref) {
  var children = _ref.children, className = _ref.className;
  var _useHint = useHint(), hintRef = _useHint.hintRef, hintText = _useHint.hintText;
  return import_react18.default.createElement("div", {
    className,
    style: {
      display: "flex",
      flex: 1,
      height: "100%",
      position: "relative"
    }
  }, children, import_react18.default.createElement("input", {
    "aria-hidden": true,
    className: "rbt-input-hint",
    ref: hintRef,
    readOnly: true,
    style: {
      backgroundColor: "transparent",
      borderColor: "transparent",
      boxShadow: "none",
      color: "rgba(0, 0, 0, 0.54)",
      left: 0,
      pointerEvents: "none",
      position: "absolute",
      top: 0,
      width: "100%"
    },
    tabIndex: -1,
    value: hintText
  }));
};
var Hint_default = Hint;

// node_modules/react-bootstrap-typeahead/es/components/Input/Input.js
var import_classnames5 = __toESM(require_classnames());
var import_react19 = __toESM(require_react());
var Input = (0, import_react19.forwardRef)(function(props, ref) {
  return import_react19.default.createElement("input", _extends({}, props, {
    className: (0, import_classnames5.default)("rbt-input-main", props.className),
    ref
  }));
});
var Input_default = Input;

// node_modules/react-bootstrap-typeahead/es/components/TypeaheadInputMulti/TypeaheadInputMulti.js
var _excluded10 = ["children", "className", "inputClassName", "inputRef", "referenceElementRef", "selected"];
function TypeaheadInputMulti(props) {
  var wrapperRef = import_react20.default.useRef(null);
  var inputElem = import_react20.default.useRef(null);
  var _propsWithBsClassName = propsWithBsClassName(props), children = _propsWithBsClassName.children, className = _propsWithBsClassName.className, inputClassName = _propsWithBsClassName.inputClassName, inputRef = _propsWithBsClassName.inputRef, referenceElementRef = _propsWithBsClassName.referenceElementRef, selected = _propsWithBsClassName.selected, rest = _objectWithoutProperties(_propsWithBsClassName, _excluded10);
  function getInputRef(input) {
    inputElem.current = input;
    props.inputRef(input);
  }
  function handleContainerClickOrFocus(e3) {
    if (props.disabled) {
      e3.currentTarget.blur();
      return;
    }
    var inputNode = inputElem.current;
    if (!inputNode || // Ignore if the clicked element is a child of the container, ie: a token
    // or the input itself.
    e3.currentTarget.contains(e3.target) && e3.currentTarget !== e3.target) {
      return;
    }
    if (isSelectable(inputNode)) {
      inputNode.selectionStart = inputNode.value.length;
    }
    inputNode.focus();
  }
  function handleKeyDown(e3) {
    if (e3.key === "Backspace" && selected.length && !props.value) {
      var _wrapperRef$current;
      e3.preventDefault();
      var wrapperChildren = (_wrapperRef$current = wrapperRef.current) === null || _wrapperRef$current === void 0 ? void 0 : _wrapperRef$current.children;
      if (wrapperChildren !== null && wrapperChildren !== void 0 && wrapperChildren.length) {
        var lastToken = wrapperChildren[wrapperChildren.length - 2];
        lastToken === null || lastToken === void 0 || lastToken.focus();
      }
    }
    props.onKeyDown && props.onKeyDown(e3);
  }
  return import_react20.default.createElement("div", {
    className: (0, import_classnames6.default)("rbt-input-multi", {
      disabled: props.disabled
    }, className),
    onClick: handleContainerClickOrFocus,
    onFocus: handleContainerClickOrFocus,
    ref: referenceElementRef,
    tabIndex: -1
  }, import_react20.default.createElement("div", {
    className: "rbt-input-wrapper",
    ref: wrapperRef
  }, children, import_react20.default.createElement(Hint_default, null, import_react20.default.createElement(Input_default, _extends({}, rest, {
    className: inputClassName,
    onKeyDown: handleKeyDown,
    ref: getInputRef,
    style: {
      backgroundColor: "transparent",
      border: 0,
      boxShadow: "none",
      cursor: "inherit",
      outline: "none",
      padding: 0,
      width: "100%",
      zIndex: 1
    }
  })))));
}
var TypeaheadInputMulti_default = TypeaheadInputMulti;

// node_modules/react-bootstrap-typeahead/es/components/TypeaheadInputSingle/TypeaheadInputSingle.js
var import_react21 = __toESM(require_react());
var _excluded11 = ["inputRef", "referenceElementRef"];
var TypeaheadInputSingle = function TypeaheadInputSingle2(_ref) {
  var inputRef = _ref.inputRef, referenceElementRef = _ref.referenceElementRef, props = _objectWithoutProperties(_ref, _excluded11);
  return import_react21.default.createElement(Hint_default, null, import_react21.default.createElement(Input_default, _extends({}, propsWithBsClassName(props), {
    ref: function ref(node) {
      inputRef(node);
      referenceElementRef(node);
    }
  })));
};
var TypeaheadInputSingle_default = TypeaheadInputSingle;

// node_modules/react-bootstrap-typeahead/es/components/TypeaheadMenu/TypeaheadMenu.js
var import_prop_types11 = __toESM(require_prop_types());
var import_react26 = __toESM(require_react());

// node_modules/react-bootstrap-typeahead/es/components/Highlighter/Highlighter.js
var import_prop_types8 = __toESM(require_prop_types());
var import_react22 = __toESM(require_react());
var propTypes7 = {
  children: import_prop_types8.default.string.isRequired,
  highlightClassName: import_prop_types8.default.string,
  search: import_prop_types8.default.string.isRequired
};
var Highlighter = function Highlighter2(_ref) {
  var children = _ref.children, _ref$highlightClassNa = _ref.highlightClassName, highlightClassName = _ref$highlightClassNa === void 0 ? "rbt-highlight-text" : _ref$highlightClassNa, search = _ref.search;
  if (!search || !children) {
    return import_react22.default.createElement(import_react22.default.Fragment, null, children);
  }
  var matchCount = 0;
  var remaining = children;
  var highlighterChildren = [];
  while (remaining) {
    var bounds = getMatchBounds(remaining, search);
    if (!bounds) {
      highlighterChildren.push(remaining);
      break;
    }
    var nonMatch = remaining.slice(0, bounds.start);
    if (nonMatch) {
      highlighterChildren.push(nonMatch);
    }
    var match = remaining.slice(bounds.start, bounds.end);
    highlighterChildren.push(import_react22.default.createElement("mark", {
      className: highlightClassName,
      key: matchCount
    }, match));
    matchCount += 1;
    remaining = remaining.slice(bounds.end);
  }
  return import_react22.default.createElement(import_react22.default.Fragment, null, highlighterChildren);
};
Highlighter.propTypes = propTypes7;
var Highlighter_default = Highlighter;

// node_modules/react-bootstrap-typeahead/es/components/Menu/Menu.js
var import_classnames8 = __toESM(require_classnames());
var import_prop_types10 = __toESM(require_prop_types());
var import_react25 = __toESM(require_react());

// node_modules/react-bootstrap-typeahead/es/components/MenuItem/MenuItem.js
var import_classnames7 = __toESM(require_classnames());
var import_react24 = __toESM(require_react());

// node_modules/react-bootstrap-typeahead/es/behaviors/item.js
var import_prop_types9 = __toESM(require_prop_types());
var import_react23 = __toESM(require_react());

// node_modules/compute-scroll-into-view/dist/index.js
var t = (t2) => "object" == typeof t2 && null != t2 && 1 === t2.nodeType;
var e = (t2, e3) => (!e3 || "hidden" !== t2) && ("visible" !== t2 && "clip" !== t2);
var n = (t2, n2) => {
  if (t2.clientHeight < t2.scrollHeight || t2.clientWidth < t2.scrollWidth) {
    const o3 = getComputedStyle(t2, null);
    return e(o3.overflowY, n2) || e(o3.overflowX, n2) || ((t3) => {
      const e3 = ((t4) => {
        if (!t4.ownerDocument || !t4.ownerDocument.defaultView) return null;
        try {
          return t4.ownerDocument.defaultView.frameElement;
        } catch (t5) {
          return null;
        }
      })(t3);
      return !!e3 && (e3.clientHeight < t3.scrollHeight || e3.clientWidth < t3.scrollWidth);
    })(t2);
  }
  return false;
};
var o = (t2, e3, n2, o3, l2, r2, i, s) => r2 < t2 && i > e3 || r2 > t2 && i < e3 ? 0 : r2 <= t2 && s <= n2 || i >= e3 && s >= n2 ? r2 - t2 - o3 : i > e3 && s < n2 || r2 < t2 && s > n2 ? i - e3 + l2 : 0;
var l = (t2) => {
  const e3 = t2.parentElement;
  return null == e3 ? t2.getRootNode().host || null : e3;
};
var r = (e3, r2) => {
  var i, s, d, h;
  if ("undefined" == typeof document) return [];
  const { scrollMode: c, block: f, inline: u, boundary: a, skipOverflowHiddenElements: g } = r2, p = "function" == typeof a ? a : (t2) => t2 !== a;
  if (!t(e3)) throw new TypeError("Invalid target");
  const m = document.scrollingElement || document.documentElement, w = [];
  let W = e3;
  for (; t(W) && p(W); ) {
    if (W = l(W), W === m) {
      w.push(W);
      break;
    }
    null != W && W === document.body && n(W) && !n(document.documentElement) || null != W && n(W, g) && w.push(W);
  }
  const b = null != (s = null == (i = window.visualViewport) ? void 0 : i.width) ? s : innerWidth, H = null != (h = null == (d = window.visualViewport) ? void 0 : d.height) ? h : innerHeight, { scrollX: y, scrollY: M } = window, { height: v, width: E, top: x, right: C, bottom: I, left: R } = e3.getBoundingClientRect(), { top: T, right: B, bottom: F, left: V } = ((t2) => {
    const e4 = window.getComputedStyle(t2);
    return { top: parseFloat(e4.scrollMarginTop) || 0, right: parseFloat(e4.scrollMarginRight) || 0, bottom: parseFloat(e4.scrollMarginBottom) || 0, left: parseFloat(e4.scrollMarginLeft) || 0 };
  })(e3);
  let k = "start" === f || "nearest" === f ? x - T : "end" === f ? I + F : x + v / 2 - T + F, D = "center" === u ? R + E / 2 - V + B : "end" === u ? C + B : R - V;
  const L = [];
  for (let t2 = 0; t2 < w.length; t2++) {
    const e4 = w[t2], { height: l2, width: r3, top: i2, right: s2, bottom: d2, left: h2 } = e4.getBoundingClientRect();
    if ("if-needed" === c && x >= 0 && R >= 0 && I <= H && C <= b && (e4 === m && !n(e4) || x >= i2 && I <= d2 && R >= h2 && C <= s2)) return L;
    const a2 = getComputedStyle(e4), g2 = parseInt(a2.borderLeftWidth, 10), p2 = parseInt(a2.borderTopWidth, 10), W2 = parseInt(a2.borderRightWidth, 10), T2 = parseInt(a2.borderBottomWidth, 10);
    let B2 = 0, F2 = 0;
    const V2 = "offsetWidth" in e4 ? e4.offsetWidth - e4.clientWidth - g2 - W2 : 0, S = "offsetHeight" in e4 ? e4.offsetHeight - e4.clientHeight - p2 - T2 : 0, X = "offsetWidth" in e4 ? 0 === e4.offsetWidth ? 0 : r3 / e4.offsetWidth : 0, Y = "offsetHeight" in e4 ? 0 === e4.offsetHeight ? 0 : l2 / e4.offsetHeight : 0;
    if (m === e4) B2 = "start" === f ? k : "end" === f ? k - H : "nearest" === f ? o(M, M + H, H, p2, T2, M + k, M + k + v, v) : k - H / 2, F2 = "start" === u ? D : "center" === u ? D - b / 2 : "end" === u ? D - b : o(y, y + b, b, g2, W2, y + D, y + D + E, E), B2 = Math.max(0, B2 + M), F2 = Math.max(0, F2 + y);
    else {
      B2 = "start" === f ? k - i2 - p2 : "end" === f ? k - d2 + T2 + S : "nearest" === f ? o(i2, d2, l2, p2, T2 + S, k, k + v, v) : k - (i2 + l2 / 2) + S / 2, F2 = "start" === u ? D - h2 - g2 : "center" === u ? D - (h2 + r3 / 2) + V2 / 2 : "end" === u ? D - s2 + W2 + V2 : o(h2, s2, r3, g2, W2 + V2, D, D + E, E);
      const { scrollLeft: t3, scrollTop: n2 } = e4;
      B2 = 0 === Y ? 0 : Math.max(0, Math.min(n2 + B2 / Y, e4.scrollHeight - l2 / Y + S)), F2 = 0 === X ? 0 : Math.max(0, Math.min(t3 + F2 / X, e4.scrollWidth - r3 / X + V2)), k += n2 - B2, D += t3 - F2;
    }
    L.push({ el: e4, top: B2, left: F2 });
  }
  return L;
};

// node_modules/scroll-into-view-if-needed/dist/index.js
var o2 = (t2) => false === t2 ? { block: "end", inline: "nearest" } : ((t3) => t3 === Object(t3) && 0 !== Object.keys(t3).length)(t2) ? t2 : { block: "start", inline: "nearest" };
function e2(e3, r2) {
  if (!e3.isConnected || !((t2) => {
    let o3 = t2;
    for (; o3 && o3.parentNode; ) {
      if (o3.parentNode === document) return true;
      o3 = o3.parentNode instanceof ShadowRoot ? o3.parentNode.host : o3.parentNode;
    }
    return false;
  })(e3)) return;
  const n2 = ((t2) => {
    const o3 = window.getComputedStyle(t2);
    return { top: parseFloat(o3.scrollMarginTop) || 0, right: parseFloat(o3.scrollMarginRight) || 0, bottom: parseFloat(o3.scrollMarginBottom) || 0, left: parseFloat(o3.scrollMarginLeft) || 0 };
  })(e3);
  if (((t2) => "object" == typeof t2 && "function" == typeof t2.behavior)(r2)) return r2.behavior(r(e3, r2));
  const l2 = "boolean" == typeof r2 || null == r2 ? void 0 : r2.behavior;
  for (const { el: a, top: i, left: s } of r(e3, o2(r2))) {
    const t2 = i - n2.top + n2.bottom, o3 = s - n2.left + n2.right;
    a.scroll({ top: t2, left: o3, behavior: l2 });
  }
}

// node_modules/react-bootstrap-typeahead/es/behaviors/item.js
var _excluded12 = ["label", "onClick", "option", "position"];
function ownKeys9(e3, r2) {
  var t2 = Object.keys(e3);
  if (Object.getOwnPropertySymbols) {
    var o3 = Object.getOwnPropertySymbols(e3);
    r2 && (o3 = o3.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
    })), t2.push.apply(t2, o3);
  }
  return t2;
}
function _objectSpread9(e3) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys9(Object(t2), true).forEach(function(r3) {
      _defineProperty(e3, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys9(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e3;
}
var propTypes8 = {
  option: optionType.isRequired,
  position: import_prop_types9.default.number
};
function useItem(_ref) {
  var label = _ref.label, onClick = _ref.onClick, option = _ref.option, position = _ref.position, props = _objectWithoutProperties(_ref, _excluded12);
  var _useTypeaheadContext = useTypeaheadContext(), activeIndex = _useTypeaheadContext.activeIndex, id = _useTypeaheadContext.id, isOnlyResult = _useTypeaheadContext.isOnlyResult, onActiveItemChange = _useTypeaheadContext.onActiveItemChange, onInitialItemChange = _useTypeaheadContext.onInitialItemChange, onMenuItemClick = _useTypeaheadContext.onMenuItemClick, setItem = _useTypeaheadContext.setItem;
  var itemRef = (0, import_react23.useRef)(null);
  (0, import_react23.useEffect)(function() {
    if (position === 0) {
      onInitialItemChange(option);
    }
  });
  (0, import_react23.useEffect)(function() {
    if (position === activeIndex) {
      onActiveItemChange(option);
      var node = itemRef.current;
      node && e2(node, {
        boundary: node.parentNode,
        scrollMode: "if-needed"
      });
    }
  }, [activeIndex, onActiveItemChange, option, position]);
  var handleClick = (0, import_react23.useCallback)(function(e3) {
    onMenuItemClick(option, e3);
    onClick && onClick(e3);
  }, [onClick, onMenuItemClick, option]);
  var active = isOnlyResult || activeIndex === position;
  setItem(option, position);
  return _objectSpread9(_objectSpread9({}, props), {}, {
    active,
    "aria-label": label,
    "aria-selected": active,
    id: getMenuItemId(id, position),
    onClick: handleClick,
    onMouseDown: preventInputBlur,
    ref: itemRef,
    role: "option"
  });
}
function withItem(Component) {
  warn(false, "Warning: `withItem` is deprecated and will be removed in the next major version. Use `useItem` instead.");
  var WrappedMenuItem = function WrappedMenuItem2(props) {
    return import_react23.default.createElement(Component, _extends({}, props, useItem(props)));
  };
  WrappedMenuItem.displayName = "withItem(".concat(getDisplayName(Component), ")");
  WrappedMenuItem.propTypes = propTypes8;
  return WrappedMenuItem;
}

// node_modules/react-bootstrap-typeahead/es/components/MenuItem/MenuItem.js
var _excluded13 = ["active", "children", "className", "disabled", "onClick"];
var BaseMenuItem = (0, import_react24.forwardRef)(function(_ref, ref) {
  var active = _ref.active, children = _ref.children, className = _ref.className, disabled = _ref.disabled, _onClick = _ref.onClick, props = _objectWithoutProperties(_ref, _excluded13);
  return import_react24.default.createElement("a", _extends({}, props, {
    className: (0, import_classnames7.default)("dropdown-item", {
      active,
      disabled
    }, className),
    href: props.href || "#",
    onClick: function onClick(e3) {
      e3.preventDefault();
      !disabled && _onClick && _onClick(e3);
    },
    ref
  }), children);
});
function MenuItem(props) {
  return import_react24.default.createElement(BaseMenuItem, useItem(props));
}

// node_modules/react-bootstrap-typeahead/es/components/Menu/Menu.js
var _excluded14 = ["emptyLabel", "innerRef", "maxHeight", "style"];
function ownKeys10(e3, r2) {
  var t2 = Object.keys(e3);
  if (Object.getOwnPropertySymbols) {
    var o3 = Object.getOwnPropertySymbols(e3);
    r2 && (o3 = o3.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
    })), t2.push.apply(t2, o3);
  }
  return t2;
}
function _objectSpread10(e3) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys10(Object(t2), true).forEach(function(r3) {
      _defineProperty(e3, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys10(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e3;
}
var MenuDivider = function MenuDivider2() {
  return import_react25.default.createElement("div", {
    className: "dropdown-divider",
    role: "separator"
  });
};
var MenuHeader = function MenuHeader2(props) {
  return (
    // eslint-disable-next-line jsx-a11y/role-has-required-aria-props
    import_react25.default.createElement("div", _extends({}, props, {
      className: "dropdown-header",
      role: "heading"
    }))
  );
};
var propTypes9 = {
  "aria-label": import_prop_types10.default.string,
  /**
   * Message to display in the menu if there are no valid results.
   */
  emptyLabel: import_prop_types10.default.node,
  /**
   * Needed for accessibility.
   */
  id: checkPropType(import_prop_types10.default.oneOfType([import_prop_types10.default.number, import_prop_types10.default.string]), isRequiredForA11y),
  /**
   * Maximum height of the dropdown menu.
   */
  maxHeight: import_prop_types10.default.string
};
var Menu = function Menu2(_ref) {
  var _ref$emptyLabel = _ref.emptyLabel, emptyLabel = _ref$emptyLabel === void 0 ? "No matches found." : _ref$emptyLabel, innerRef = _ref.innerRef, _ref$maxHeight = _ref.maxHeight, maxHeight = _ref$maxHeight === void 0 ? "300px" : _ref$maxHeight, style = _ref.style, props = _objectWithoutProperties(_ref, _excluded14);
  var children = import_react25.Children.count(props.children) === 0 ? import_react25.default.createElement(BaseMenuItem, {
    disabled: true,
    role: "option"
  }, emptyLabel) : props.children;
  return (
    /* eslint-disable jsx-a11y/interactive-supports-focus */
    import_react25.default.createElement("div", _extends({}, props, {
      "aria-label": props["aria-label"] || "menu-options",
      className: (0, import_classnames8.default)("rbt-menu", "dropdown-menu", "show", props.className),
      onMouseDown: (
        // Prevent input from blurring when clicking on the menu scrollbar.
        preventInputBlur
      ),
      ref: innerRef,
      role: "listbox",
      style: _objectSpread10(_objectSpread10({}, style), {}, {
        display: "block",
        maxHeight,
        overflow: "auto"
      })
    }), children)
  );
};
Menu.propTypes = propTypes9;
Menu.Divider = MenuDivider;
Menu.Header = MenuHeader;
var Menu_default = Menu;

// node_modules/react-bootstrap-typeahead/es/components/TypeaheadMenu/TypeaheadMenu.js
var _excluded15 = ["labelKey", "newSelectionPrefix", "options", "paginationText", "renderMenuItemChildren", "text"];
var propTypes10 = {
  /**
   * Provides the ability to specify a prefix before the user-entered text to
   * indicate that the selection will be new. No-op unless `allowNew={true}`.
   */
  newSelectionPrefix: import_prop_types11.default.node,
  /**
   * Prompt displayed when large data sets are paginated.
   */
  paginationText: import_prop_types11.default.node,
  /**
   * Provides a hook for customized rendering of menu item contents.
   */
  renderMenuItemChildren: import_prop_types11.default.func
};
function renderMenuItemChildrenFn(option, props) {
  return import_react26.default.createElement(Highlighter_default, {
    search: props.text
  }, getOptionLabel_default(option, props.labelKey));
}
var TypeaheadMenu = function TypeaheadMenu2(props) {
  var labelKey = props.labelKey, _props$newSelectionPr = props.newSelectionPrefix, newSelectionPrefix = _props$newSelectionPr === void 0 ? "New selection: " : _props$newSelectionPr, options = props.options, _props$paginationText = props.paginationText, paginationText = _props$paginationText === void 0 ? "Display additional results..." : _props$paginationText, _props$renderMenuItem = props.renderMenuItemChildren, renderMenuItemChildren = _props$renderMenuItem === void 0 ? renderMenuItemChildrenFn : _props$renderMenuItem, text = props.text, menuProps = _objectWithoutProperties(props, _excluded15);
  var renderMenuItem = function renderMenuItem2(option, position) {
    var label = getOptionLabel_default(option, labelKey);
    var menuItemProps = {
      disabled: !!getOptionProperty(option, "disabled"),
      label,
      option,
      position
    };
    if (getOptionProperty(option, "customOption")) {
      return import_react26.default.createElement(MenuItem, _extends({}, menuItemProps, {
        className: "rbt-menu-custom-option",
        key: position,
        label
      }), newSelectionPrefix, import_react26.default.createElement(Highlighter_default, {
        search: text
      }, label));
    }
    if (getOptionProperty(option, "paginationOption")) {
      return import_react26.default.createElement(import_react26.default.Fragment, {
        key: "pagination-option-divider"
      }, import_react26.default.createElement(Menu_default.Divider, null), import_react26.default.createElement(MenuItem, _extends({}, menuItemProps, {
        className: "rbt-menu-pagination-option",
        label: (
          // TODO: Fix how (aria-)labels are passed to `MenuItem`.
          // `paginationText` can be a ReactNode.
          isString(paginationText) ? paginationText : ""
        )
      }), paginationText));
    }
    return import_react26.default.createElement(MenuItem, _extends({}, menuItemProps, {
      key: position
    }), renderMenuItemChildren(option, props, position));
  };
  return import_react26.default.createElement(Menu_default, _extends({}, menuProps, {
    key: (
      // Force a re-render if the text changes to ensure that menu
      // positioning updates correctly.
      text
    )
  }), options.map(renderMenuItem));
};
TypeaheadMenu.propTypes = propTypes10;
var TypeaheadMenu_default = TypeaheadMenu;

// node_modules/react-bootstrap-typeahead/es/components/Typeahead/Typeahead.js
function ownKeys11(e3, r2) {
  var t2 = Object.keys(e3);
  if (Object.getOwnPropertySymbols) {
    var o3 = Object.getOwnPropertySymbols(e3);
    r2 && (o3 = o3.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
    })), t2.push.apply(t2, o3);
  }
  return t2;
}
function _objectSpread11(e3) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys11(Object(t2), true).forEach(function(r3) {
      _defineProperty(e3, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys11(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e3;
}
function _createSuper2(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct2();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct2() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e3) {
    return false;
  }
}
var propTypes11 = {
  /**
   * Displays a button to clear the input when there are selections.
   */
  clearButton: import_prop_types12.default.bool,
  /**
   * Props to be applied directly to the input. `onBlur`, `onChange`,
   * `onFocus`, and `onKeyDown` are ignored.
   */
  inputProps: checkPropType(import_prop_types12.default.object, inputPropsType),
  /**
   * Bootstrap 4 only. Adds the `is-invalid` classname to the `form-control`.
   */
  isInvalid: import_prop_types12.default.bool,
  /**
   * Indicate whether an asynchronous data fetch is happening.
   */
  isLoading: import_prop_types12.default.bool,
  /**
   * Bootstrap 4 only. Adds the `is-valid` classname to the `form-control`.
   */
  isValid: import_prop_types12.default.bool,
  /**
   * Callback for custom input rendering.
   */
  renderInput: import_prop_types12.default.func,
  /**
   * Callback for custom menu rendering.
   */
  renderMenu: import_prop_types12.default.func,
  /**
   * Callback for custom menu rendering.
   */
  renderToken: import_prop_types12.default.func,
  /**
   * Specifies the size of the input.
   */
  size: sizeType
};
var defaultProps2 = {
  isLoading: false
};
var defaultRenderMenu = function defaultRenderMenu2(results, menuProps, props) {
  return import_react27.default.createElement(TypeaheadMenu_default, _extends({}, menuProps, {
    labelKey: props.labelKey,
    options: results,
    text: props.text
  }));
};
var defaultRenderToken = function defaultRenderToken2(option, props, idx) {
  return import_react27.default.createElement(Token_default, {
    disabled: props.disabled,
    key: idx,
    onRemove: props.onRemove,
    option,
    tabIndex: props.tabIndex
  }, getOptionLabel_default(option, props.labelKey));
};
var overlayPropKeys = ["align", "dropup", "flip", "positionFixed"];
function getOverlayProps(props) {
  return pick(props, overlayPropKeys);
}
var TypeaheadComponent = function(_React$Component) {
  _inherits(TypeaheadComponent2, _React$Component);
  var _super = _createSuper2(TypeaheadComponent2);
  function TypeaheadComponent2() {
    var _this;
    _classCallCheck(this, TypeaheadComponent2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "_referenceElement", null);
    _defineProperty(_assertThisInitialized(_this), "referenceElementRef", function(referenceElement) {
      _this._referenceElement = referenceElement;
    });
    _defineProperty(_assertThisInitialized(_this), "_renderInput", function(inputProps, props) {
      var _this$props = _this.props, isInvalid = _this$props.isInvalid, isValid = _this$props.isValid, multiple = _this$props.multiple, renderInput = _this$props.renderInput, renderToken = _this$props.renderToken, size4 = _this$props.size;
      if (isFunction(renderInput)) {
        return renderInput(inputProps, props);
      }
      var commonProps = _objectSpread11(_objectSpread11({}, inputProps), {}, {
        isInvalid,
        isValid,
        size: size4
      });
      if (!multiple) {
        return import_react27.default.createElement(TypeaheadInputSingle_default, commonProps);
      }
      var labelKey = props.labelKey, onRemove = props.onRemove, selected = props.selected;
      return import_react27.default.createElement(TypeaheadInputMulti_default, _extends({}, commonProps, {
        placeholder: selected.length ? "" : inputProps.placeholder,
        selected
      }), selected.map(function(option, idx) {
        return (renderToken || defaultRenderToken)(option, _objectSpread11(_objectSpread11({}, commonProps), {}, {
          labelKey,
          onRemove
        }), idx);
      }));
    });
    _defineProperty(_assertThisInitialized(_this), "_renderMenu", function(results, menuProps, props) {
      var _this$props2 = _this.props, emptyLabel = _this$props2.emptyLabel, id = _this$props2.id, maxHeight = _this$props2.maxHeight, newSelectionPrefix = _this$props2.newSelectionPrefix, paginationText = _this$props2.paginationText, renderMenu = _this$props2.renderMenu, renderMenuItemChildren = _this$props2.renderMenuItemChildren;
      return (renderMenu || defaultRenderMenu)(results, _objectSpread11(_objectSpread11({}, menuProps), {}, {
        emptyLabel,
        id,
        maxHeight,
        newSelectionPrefix,
        paginationText,
        renderMenuItemChildren
      }), props);
    });
    _defineProperty(_assertThisInitialized(_this), "_renderAux", function(_ref) {
      var onClear = _ref.onClear, selected = _ref.selected;
      var _this$props3 = _this.props, clearButton = _this$props3.clearButton, disabled = _this$props3.disabled, isLoading = _this$props3.isLoading, size4 = _this$props3.size;
      var content;
      if (isLoading) {
        content = import_react27.default.createElement(Loader_default, null);
      } else if (clearButton && !disabled && selected.length) {
        content = import_react27.default.createElement(ClearButton_default, {
          onClick: onClear,
          onMouseDown: preventInputBlur,
          size: size4
        });
      }
      return content ? import_react27.default.createElement("div", {
        className: (0, import_classnames9.default)("rbt-aux", {
          "rbt-aux-lg": isSizeLarge(size4)
        })
      }, content) : null;
    });
    return _this;
  }
  _createClass(TypeaheadComponent2, [{
    key: "render",
    value: function render() {
      var _this2 = this;
      var _this$props4 = this.props, children = _this$props4.children, className = _this$props4.className, instanceRef = _this$props4.instanceRef, open = _this$props4.open, options = _this$props4.options, style = _this$props4.style;
      return import_react27.default.createElement(Typeahead_default, _extends({}, this.props, {
        options,
        ref: instanceRef
      }), function(props) {
        var hideMenu2 = props.hideMenu, isMenuShown = props.isMenuShown, results = props.results;
        var auxContent = _this2._renderAux(props);
        return import_react27.default.createElement(RootClose_default, {
          disabled: open || !isMenuShown,
          onRootClose: hideMenu2
        }, function(ref) {
          return import_react27.default.createElement("div", {
            className: (0, import_classnames9.default)("rbt", {
              "has-aux": !!auxContent,
              "is-invalid": _this2.props.isInvalid,
              "is-valid": _this2.props.isValid
            }, className),
            ref,
            style: _objectSpread11(_objectSpread11({}, style), {}, {
              outline: "none",
              position: "relative"
            }),
            tabIndex: -1
          }, _this2._renderInput(_objectSpread11(_objectSpread11({}, props.getInputProps(_this2.props.inputProps)), {}, {
            referenceElementRef: _this2.referenceElementRef
          }), props), import_react27.default.createElement(Overlay_default, _extends({}, getOverlayProps(_this2.props), {
            isMenuShown,
            referenceElement: _this2._referenceElement
          }), function(menuProps) {
            return _this2._renderMenu(results, menuProps, props);
          }), auxContent, isFunction(children) ? children(props) : children);
        });
      });
    }
  }]);
  return TypeaheadComponent2;
}(import_react27.default.Component);
_defineProperty(TypeaheadComponent, "propTypes", propTypes11);
_defineProperty(TypeaheadComponent, "defaultProps", defaultProps2);
var Typeahead_default2 = (0, import_react27.forwardRef)(function(props, ref) {
  return import_react27.default.createElement(TypeaheadComponent, _extends({}, props, {
    instanceRef: ref
  }));
});

// node_modules/react-bootstrap-typeahead/es/components/AsyncTypeahead/AsyncTypeahead.js
var AsyncTypeahead = (0, import_react28.forwardRef)(function(props, ref) {
  return import_react28.default.createElement(Typeahead_default2, _extends({}, useAsync(props), {
    ref
  }));
});
var AsyncTypeahead_default = AsyncTypeahead;
export {
  AsyncTypeahead_default as AsyncTypeahead,
  BaseMenuItem,
  ClearButton_default as ClearButton,
  Highlighter_default as Highlighter,
  Hint_default as Hint,
  Input_default as Input,
  Loader_default as Loader,
  Menu_default as Menu,
  MenuItem,
  Token_default as Token,
  Typeahead_default2 as Typeahead,
  TypeaheadInputMulti_default as TypeaheadInputMulti,
  TypeaheadInputSingle_default as TypeaheadInputSingle,
  TypeaheadMenu_default as TypeaheadMenu,
  Typeahead_default as TypeaheadRef,
  useAsync,
  useHint,
  useItem,
  useToken,
  withAsync,
  withItem,
  withToken
};
//# sourceMappingURL=react-bootstrap-typeahead.js.map
